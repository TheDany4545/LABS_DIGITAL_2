

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Tue Feb 23 13:13:50 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2,group=3
    17                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.20
    35                           ; Generated 12/02/2020 GMT
    36                           ; 
    37                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302                           
   303                           	psect	strings
   304  03AA                     __pstrings:
   305  03AA                     stringtab:
   306  03AA                     __stringtab:
   307  03AA                     stringcode:	
   308                           ;	String table - string pointers are 1 byte each
   309                           
   310  03AA                     stringdir:
   311  03AA  3003               	movlw	high stringdir
   312  03AB  008A               	movwf	10
   313  03AC  0804               	movf	4,w
   314  03AD  0A84               	incf	4,f
   315  03AE  0782               	addwf	2,f
   316  03AF                     __stringbase:
   317  03AF  3400               	retlw	0
   318  03B0                     __end_of__stringtab:
   319  03B0                     _dpowers:
   320  03B0  3401               	retlw	1
   321  03B1  3400               	retlw	0
   322  03B2  340A               	retlw	10
   323  03B3  3400               	retlw	0
   324  03B4  3464               	retlw	100
   325  03B5  3400               	retlw	0
   326  03B6  34E8               	retlw	232
   327  03B7  3403               	retlw	3
   328  03B8  3410               	retlw	16
   329  03B9  3427               	retlw	39
   330  03BA                     __end_of_dpowers:
   331  0001                     _TMR0	set	1
   332  000B                     _INTCONbits	set	11
   333  0009                     _PORTE	set	9
   334  0007                     _PORTC	set	7
   335  0006                     _PORTB	set	6
   336  0005                     _PORTA	set	5
   337  0009                     _PORTEbits	set	9
   338  0008                     _PORTD	set	8
   339  000C                     _PIR1bits	set	12
   340  001E                     _ADRESH	set	30
   341  001F                     _ADCON0bits	set	31
   342  008C                     _PIE1bits	set	140
   343  009F                     _ADCON1bits	set	159
   344  0081                     _OPTION_REGbits	set	129
   345  008F                     _OSCCON	set	143
   346  0096                     _IOCB	set	150
   347  0089                     _TRISE	set	137
   348  0088                     _TRISD	set	136
   349  0087                     _TRISC	set	135
   350  0086                     _TRISB	set	134
   351  0085                     _TRISA	set	133
   352  0189                     _ANSELHbits	set	393
   353  0189                     _ANSELH	set	393
   354  0188                     _ANSEL	set	392
   355  03BA                     STR_3:
   356  03BA  3420               	retlw	32	;' '
   357  03BB  3420               	retlw	32	;' '
   358  03BC  3453               	retlw	83	;'S'
   359  03BD  3431               	retlw	49	;'1'
   360  03BE  343A               	retlw	58	;':'
   361  03BF  3420               	retlw	32	;' '
   362  03C0  3420               	retlw	32	;' '
   363  03C1  3453               	retlw	83	;'S'
   364  03C2  3432               	retlw	50	;'2'
   365  03C3  343A               	retlw	58	;':'
   366  03C4  3420               	retlw	32	;' '
   367  03C5  3420               	retlw	32	;' '
   368  03C6  3453               	retlw	83	;'S'
   369  03C7  3433               	retlw	51	;'3'
   370  03C8  343A               	retlw	58	;':'
   371  03C9  3420               	retlw	32	;' '
   372  03CA  3400               	retlw	0
   373  03CB                     STR_1:
   374  03CB  3441               	retlw	65	;'A'
   375  03CC  3425               	retlw	37	;'%'
   376  03CD  342E               	retlw	46	;'.'
   377  03CE  3433               	retlw	51	;'3'
   378  03CF  3469               	retlw	105	;'i'
   379  03D0  3456               	retlw	86	;'V'
   380  03D1  3400               	retlw	0
   381  03D2                     STR_2:
   382  03D2  3442               	retlw	66	;'B'
   383  03D3  3425               	retlw	37	;'%'
   384  03D4  342E               	retlw	46	;'.'
   385  03D5  3433               	retlw	51	;'3'
   386  03D6  3469               	retlw	105	;'i'
   387  03D7  3456               	retlw	86	;'V'
   388  03D8  3400               	retlw	0
   389  03D9                     STR_4:
   390  03D9  3425               	retlw	37	;'%'
   391  03DA  342E               	retlw	46	;'.'
   392  03DB  3433               	retlw	51	;'3'
   393  03DC  3469               	retlw	105	;'i'
   394  03DD  3400               	retlw	0
   395                           
   396                           	psect	cinit
   397  000F                     start_initialization:	
   398                           ; #config settings
   399                           
   400  000F                     __initialization:
   401                           
   402                           ; Clear objects allocated to COMMON
   403  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   404  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   405  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   406                           
   407                           ; Clear objects allocated to BANK0
   408  0012  1383               	bcf	3,7	;select IRP bank0
   409  0013  303D               	movlw	low __pbssBANK0
   410  0014  0084               	movwf	4
   411  0015  3050               	movlw	low (__pbssBANK0+19)
   412  0016  120A  118A  24CF  120A  118A  	fcall	clear_ram0
   413  001B                     end_of_initialization:	
   414                           ;End of C runtime variable initialization code
   415                           
   416  001B                     __end_of__initialization:
   417  001B  0183               	clrf	3
   418  001C  120A  118A  2A79   	ljmp	_main	;jump to C main() function
   419                           
   420                           	psect	bssCOMMON
   421  0078                     __pbssCOMMON:
   422  0078                     _adc_flag:
   423  0078                     	ds	1
   424  0079                     _str_pos:
   425  0079                     	ds	1
   426  007A                     _uart_data:
   427  007A                     	ds	1
   428                           
   429                           	psect	bssBANK0
   430  003D                     __pbssBANK0:
   431  003D                     _ban_an2:
   432  003D                     	ds	2
   433  003F                     _ban_an1:
   434  003F                     	ds	2
   435  0041                     _eusart_flag:
   436  0041                     	ds	1
   437  0042                     _uart_cont:
   438  0042                     	ds	1
   439  0043                     _adc_data2:
   440  0043                     	ds	1
   441  0044                     _adc_data1:
   442  0044                     	ds	1
   443  0045                     _str_pot_a:
   444  0045                     	ds	6
   445  004B                     _str_pot_b:
   446  004B                     	ds	5
   447                           
   448                           	psect	clrtext
   449  04CF                     clear_ram0:	
   450                           ;	Called with FSR containing the base address, and
   451                           ;	W with the last address+1
   452                           
   453  04CF  0064               	clrwdt	;clear the watchdog before getting into this loop
   454  04D0                     clrloop0:
   455  04D0  0180               	clrf	0	;clear RAM location pointed to by FSR
   456  04D1  0A84               	incf	4,f	;increment pointer
   457  04D2  0604               	xorwf	4,w	;XOR with final address
   458  04D3  1903               	btfsc	3,2	;have we reached the end yet?
   459  04D4  3400               	retlw	0	;all done for this memory range, return
   460  04D5  0604               	xorwf	4,w	;XOR again to restore value
   461  04D6  2CD0               	goto	clrloop0	;do the next byte
   462                           
   463                           	psect	cstackCOMMON
   464  0070                     __pcstackCOMMON:
   465  0070                     ?_isdigit:
   466  0070                     ?_setup:	
   467                           ; 1 bit 
   468                           
   469  0070                     ?_ADC_1:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     ?_ADC_2:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     ?_display:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0070                     ?_lcd_write_string:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0070                     ?_lcd_write_char:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0070                     ?_lcd_port:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0070                     ?_lcd_cmd:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0070                     ?_main:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0070                     ?_canal_10:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0070                     ?_canal_12:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ?_isr:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0070                     ??_isr:	
   503                           ; 1 bytes @ 0x0
   504                           
   505  0070                     ?_lcd_init:	
   506                           ; 1 bytes @ 0x0
   507                           
   508                           
   509                           ; 1 bytes @ 0x0
   510  0070                     	ds	3
   511  0073                     ??_ADC_1:
   512  0073                     ??_ADC_2:	
   513                           ; 1 bytes @ 0x3
   514                           
   515  0073                     ??_lcd_port:	
   516                           ; 1 bytes @ 0x3
   517                           
   518  0073                     ??_isdigit:	
   519                           ; 1 bytes @ 0x3
   520                           
   521  0073                     ??_canal_10:	
   522                           ; 1 bytes @ 0x3
   523                           
   524  0073                     ??_canal_12:	
   525                           ; 1 bytes @ 0x3
   526                           
   527  0073                     ?___bmul:	
   528                           ; 1 bytes @ 0x3
   529                           
   530  0073                     ?___lwdiv:	
   531                           ; 1 bytes @ 0x3
   532                           
   533  0073                     lcd_port@a:	
   534                           ; 2 bytes @ 0x3
   535                           
   536  0073                     ___bmul@multiplicand:	
   537                           ; 1 bytes @ 0x3
   538                           
   539  0073                     _isdigit$871:	
   540                           ; 1 bytes @ 0x3
   541                           
   542  0073                     ___lwdiv@divisor:	
   543                           ; 1 bytes @ 0x3
   544                           
   545                           
   546                           ; 2 bytes @ 0x3
   547  0073                     	ds	1
   548  0074                     ??_lcd_write_char:
   549  0074                     ??_lcd_cmd:	
   550                           ; 1 bytes @ 0x4
   551                           
   552  0074                     ??___bmul:	
   553                           ; 1 bytes @ 0x4
   554                           
   555  0074                     isdigit@c:	
   556                           ; 1 bytes @ 0x4
   557                           
   558                           
   559                           ; 1 bytes @ 0x4
   560  0074                     	ds	1
   561  0075                     ___bmul@product:
   562  0075                     ___lwdiv@dividend:	
   563                           ; 1 bytes @ 0x5
   564                           
   565                           
   566                           ; 2 bytes @ 0x5
   567  0075                     	ds	1
   568  0076                     lcd_cmd@cmd:
   569  0076                     lcd_write_char@data:	
   570                           ; 1 bytes @ 0x6
   571                           
   572  0076                     ___bmul@multiplier:	
   573                           ; 1 bytes @ 0x6
   574                           
   575                           
   576                           ; 1 bytes @ 0x6
   577  0076                     	ds	1
   578  0077                     ??_setup:
   579  0077                     ?_lcd_move_cursor:	
   580                           ; 1 bytes @ 0x7
   581                           
   582  0077                     ??_lcd_write_string:	
   583                           ; 1 bytes @ 0x7
   584                           
   585  0077                     ??___lwdiv:	
   586                           ; 1 bytes @ 0x7
   587                           
   588  0077                     lcd_move_cursor@col:	
   589                           ; 1 bytes @ 0x7
   590                           
   591                           
   592                           ; 1 bytes @ 0x7
   593  0077                     	ds	1
   594  0078                     ??_lcd_move_cursor:
   595                           
   596                           	psect	cstackBANK0
   597  0020                     __pcstackBANK0:	
   598                           ; 1 bytes @ 0x8
   599                           
   600  0020                     ??_lcd_init:
   601  0020                     lcd_move_cursor@row:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0020                     lcd_write_string@a:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0020                     ___lwdiv@counter:	
   608                           ; 1 bytes @ 0x0
   609                           
   610                           
   611                           ; 1 bytes @ 0x0
   612  0020                     	ds	1
   613  0021                     lcd_write_string@i:
   614  0021                     ___lwdiv@quotient:	
   615                           ; 2 bytes @ 0x1
   616                           
   617                           
   618                           ; 2 bytes @ 0x1
   619  0021                     	ds	2
   620  0023                     ?___lwmod:
   621  0023                     ___lwmod@divisor:	
   622                           ; 2 bytes @ 0x3
   623                           
   624                           
   625                           ; 2 bytes @ 0x3
   626  0023                     	ds	2
   627  0025                     ___lwmod@dividend:
   628                           
   629                           ; 2 bytes @ 0x5
   630  0025                     	ds	2
   631  0027                     ??___lwmod:
   632                           
   633                           ; 1 bytes @ 0x7
   634  0027                     	ds	1
   635  0028                     ___lwmod@counter:
   636                           
   637                           ; 1 bytes @ 0x8
   638  0028                     	ds	1
   639  0029                     ?_sprintf:
   640  0029                     sprintf@f:	
   641                           ; 2 bytes @ 0x9
   642                           
   643                           
   644                           ; 1 bytes @ 0x9
   645  0029                     	ds	3
   646  002C                     ??_sprintf:
   647                           
   648                           ; 1 bytes @ 0xC
   649  002C                     	ds	3
   650  002F                     sprintf@ap:
   651                           
   652                           ; 1 bytes @ 0xF
   653  002F                     	ds	1
   654  0030                     sprintf@flag:
   655                           
   656                           ; 1 bytes @ 0x10
   657  0030                     	ds	1
   658  0031                     sprintf@val:
   659                           
   660                           ; 2 bytes @ 0x11
   661  0031                     	ds	2
   662  0033                     sprintf@sp:
   663                           
   664                           ; 1 bytes @ 0x13
   665  0033                     	ds	1
   666  0034                     sprintf@prec:
   667                           
   668                           ; 1 bytes @ 0x14
   669  0034                     	ds	1
   670  0035                     sprintf@c:
   671                           
   672                           ; 1 bytes @ 0x15
   673  0035                     	ds	1
   674  0036                     ??_display:
   675                           
   676                           ; 1 bytes @ 0x16
   677  0036                     	ds	1
   678  0037                     display@str:
   679                           
   680                           ; 3 bytes @ 0x17
   681  0037                     	ds	3
   682  003A                     ??_main:
   683                           
   684                           ; 1 bytes @ 0x1A
   685  003A                     	ds	3
   686                           
   687                           	psect	maintext
   688  0279                     __pmaintext:	
   689 ;;
   690 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   691 ;;
   692 ;; *************** function _main *****************
   693 ;; Defined at:
   694 ;;		line 40 in file "rutina_adc.c"
   695 ;; Parameters:    Size  Location     Type
   696 ;;		None
   697 ;; Auto vars:     Size  Location     Type
   698 ;;		None
   699 ;; Return value:  Size  Location     Type
   700 ;;                  1    wreg      void 
   701 ;; Registers used:
   702 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   703 ;; Tracked objects:
   704 ;;		On entry : B00/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   708 ;;      Params:         0       0       0       0       0
   709 ;;      Locals:         0       0       0       0       0
   710 ;;      Temps:          0       3       0       0       0
   711 ;;      Totals:         0       3       0       0       0
   712 ;;Total ram usage:        3 bytes
   713 ;; Hardware stack levels required when called:    5
   714 ;; This function calls:
   715 ;;		_ADC_1
   716 ;;		_ADC_2
   717 ;;		_display
   718 ;;		_setup
   719 ;;		_sprintf
   720 ;; This function is called by:
   721 ;;		Startup code after reset
   722 ;; This function uses a non-reentrant model
   723 ;;
   724                           
   725                           
   726                           ;psect for function _main
   727  0279                     _main:
   728  0279                     l1951:	
   729                           ;incstack = 0
   730                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   731                           
   732                           
   733                           ;rutina_adc.c: 42:     setup();
   734  0279  120A  118A  2220  120A  118A  	fcall	_setup
   735  027E                     l1953:
   736                           
   737                           ;rutina_adc.c: 44:     {;rutina_adc.c: 45:         if (ADCON0bits.GO_DONE == 0 && ban_an
      +                          1 == 0) {
   738  027E  1283               	bcf	3,5	;RP0=0, select bank0
   739  027F  1303               	bcf	3,6	;RP1=0, select bank0
   740  0280  189F               	btfsc	31,1	;volatile
   741  0281  2A83               	goto	u1061
   742  0282  2A84               	goto	u1060
   743  0283                     u1061:
   744  0283  2A8F               	goto	l1959
   745  0284                     u1060:
   746  0284                     l1955:
   747  0284  083F               	movf	_ban_an1,w
   748  0285  0440               	iorwf	_ban_an1+1,w
   749  0286  1D03               	btfss	3,2
   750  0287  2A89               	goto	u1071
   751  0288  2A8A               	goto	u1070
   752  0289                     u1071:
   753  0289  2A8F               	goto	l1959
   754  028A                     u1070:
   755  028A                     l1957:
   756                           
   757                           ;rutina_adc.c: 46:             ADC_1();
   758  028A  120A  118A  24A8  120A  118A  	fcall	_ADC_1
   759  028F                     l1959:
   760                           
   761                           ;rutina_adc.c: 48:         if (ADCON0bits.GO_DONE == 0 && ban_an2 == 0) {
   762  028F  1283               	bcf	3,5	;RP0=0, select bank0
   763  0290  1303               	bcf	3,6	;RP1=0, select bank0
   764  0291  189F               	btfsc	31,1	;volatile
   765  0292  2A94               	goto	u1081
   766  0293  2A95               	goto	u1080
   767  0294                     u1081:
   768  0294  2AA0               	goto	l1965
   769  0295                     u1080:
   770  0295                     l1961:
   771  0295  083D               	movf	_ban_an2,w
   772  0296  043E               	iorwf	_ban_an2+1,w
   773  0297  1D03               	btfss	3,2
   774  0298  2A9A               	goto	u1091
   775  0299  2A9B               	goto	u1090
   776  029A                     u1091:
   777  029A  2AA0               	goto	l1965
   778  029B                     u1090:
   779  029B                     l1963:
   780                           
   781                           ;rutina_adc.c: 49:             ADC_2();
   782  029B  120A  118A  2493  120A  118A  	fcall	_ADC_2
   783  02A0                     l1965:
   784                           
   785                           ;rutina_adc.c: 51:         sprintf(str_pot_a, "A%.3iV", adc_data1<<1);
   786  02A0  301C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   787  02A1  1283               	bcf	3,5	;RP0=0, select bank0
   788  02A2  1303               	bcf	3,6	;RP1=0, select bank0
   789  02A3  00BA               	movwf	??_main
   790  02A4  083A               	movf	??_main,w
   791  02A5  00A9               	movwf	sprintf@f
   792  02A6  0844               	movf	_adc_data1,w
   793  02A7  00BB               	movwf	??_main+1
   794  02A8  01BC               	clrf	??_main+2
   795  02A9  1003               	clrc
   796  02AA  0D3B               	rlf	??_main+1,w
   797  02AB  00AA               	movwf	?_sprintf+1
   798  02AC  0D3C               	rlf	??_main+2,w
   799  02AD  00AB               	movwf	?_sprintf+2
   800  02AE  3045               	movlw	(low (_str_pot_a| 0))& (0+255)
   801  02AF  120A  118A  201F  120A  118A  	fcall	_sprintf
   802  02B4                     l1967:
   803                           
   804                           ;rutina_adc.c: 52:         sprintf(str_pot_b, "B%.3iV", adc_data2<<1);
   805  02B4  3023               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   806  02B5  1283               	bcf	3,5	;RP0=0, select bank0
   807  02B6  1303               	bcf	3,6	;RP1=0, select bank0
   808  02B7  00BA               	movwf	??_main
   809  02B8  083A               	movf	??_main,w
   810  02B9  00A9               	movwf	sprintf@f
   811  02BA  0843               	movf	_adc_data2,w
   812  02BB  00BB               	movwf	??_main+1
   813  02BC  01BC               	clrf	??_main+2
   814  02BD  1003               	clrc
   815  02BE  0D3B               	rlf	??_main+1,w
   816  02BF  00AA               	movwf	?_sprintf+1
   817  02C0  0D3C               	rlf	??_main+2,w
   818  02C1  00AB               	movwf	?_sprintf+2
   819  02C2  304B               	movlw	(low (_str_pot_b| 0))& (0+255)
   820  02C3  120A  118A  201F  120A  118A  	fcall	_sprintf
   821  02C8                     l1969:
   822                           
   823                           ;rutina_adc.c: 54:         display();
   824  02C8  120A  118A  2184  120A  118A  	fcall	_display
   825  02CD  2A7E               	goto	l1953
   826  02CE  120A  118A  280C   	ljmp	start
   827  02D1                     __end_of_main:
   828                           
   829                           	psect	text1
   830  0220                     __ptext1:	
   831 ;; *************** function _setup *****************
   832 ;; Defined at:
   833 ;;		line 151 in file "lib_adc.c"
   834 ;; Parameters:    Size  Location     Type
   835 ;;		None
   836 ;; Auto vars:     Size  Location     Type
   837 ;;		None
   838 ;; Return value:  Size  Location     Type
   839 ;;                  1    wreg      void 
   840 ;; Registers used:
   841 ;;		wreg, status,2, status,0, pclath, cstack
   842 ;; Tracked objects:
   843 ;;		On entry : 0/0
   844 ;;		On exit  : 0/0
   845 ;;		Unchanged: 0/0
   846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   847 ;;      Params:         0       0       0       0       0
   848 ;;      Locals:         0       0       0       0       0
   849 ;;      Temps:          0       0       0       0       0
   850 ;;      Totals:         0       0       0       0       0
   851 ;;Total ram usage:        0 bytes
   852 ;; Hardware stack levels used:    1
   853 ;; Hardware stack levels required when called:    4
   854 ;; This function calls:
   855 ;;		_canal_10
   856 ;;		_lcd_cmd
   857 ;;		_lcd_init
   858 ;; This function is called by:
   859 ;;		_main
   860 ;; This function uses a non-reentrant model
   861 ;;
   862                           
   863                           
   864                           ;psect for function _setup
   865  0220                     _setup:
   866  0220                     l1825:	
   867                           ;incstack = 0
   868                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   869                           
   870                           
   871                           ;lib_adc.c: 153:     ANSEL = 0x03;
   872  0220  3003               	movlw	3
   873  0221  1683               	bsf	3,5	;RP0=1, select bank3
   874  0222  1703               	bsf	3,6	;RP1=1, select bank3
   875  0223  0088               	movwf	8	;volatile
   876  0224                     l1827:
   877                           
   878                           ;lib_adc.c: 154:     ANSELH = 0x00;
   879  0224  0189               	clrf	9	;volatile
   880  0225                     l1829:
   881                           
   882                           ;lib_adc.c: 156:     TRISA = 0x03;
   883  0225  3003               	movlw	3
   884  0226  1683               	bsf	3,5	;RP0=1, select bank1
   885  0227  1303               	bcf	3,6	;RP1=0, select bank1
   886  0228  0085               	movwf	5	;volatile
   887                           
   888                           ;lib_adc.c: 157:     TRISB = 0x00;
   889  0229  0186               	clrf	6	;volatile
   890  022A                     l1831:
   891                           
   892                           ;lib_adc.c: 158:     TRISC = 0x80;
   893  022A  3080               	movlw	128
   894  022B  0087               	movwf	7	;volatile
   895  022C                     l1833:
   896                           
   897                           ;lib_adc.c: 159:     TRISD = 0x00;
   898  022C  0188               	clrf	8	;volatile
   899  022D                     l1835:
   900                           
   901                           ;lib_adc.c: 160:     TRISE = 0x00;
   902  022D  0189               	clrf	9	;volatile
   903  022E                     l1837:
   904                           
   905                           ;lib_adc.c: 162:     PORTA = 0;
   906  022E  1283               	bcf	3,5	;RP0=0, select bank0
   907  022F  1303               	bcf	3,6	;RP1=0, select bank0
   908  0230  0185               	clrf	5	;volatile
   909  0231                     l1839:
   910                           
   911                           ;lib_adc.c: 163:     PORTB = 0;
   912  0231  0186               	clrf	6	;volatile
   913  0232                     l1841:
   914                           
   915                           ;lib_adc.c: 164:     PORTC = 0;
   916  0232  0187               	clrf	7	;volatile
   917  0233                     l1843:
   918                           
   919                           ;lib_adc.c: 165:     PORTD = 0;
   920  0233  0188               	clrf	8	;volatile
   921  0234                     l1845:
   922                           
   923                           ;lib_adc.c: 166:     PORTE = 0;
   924  0234  0189               	clrf	9	;volatile
   925  0235                     l1847:
   926                           
   927                           ;lib_adc.c: 169:     IOCB = 0x00;
   928  0235  1683               	bsf	3,5	;RP0=1, select bank1
   929  0236  1303               	bcf	3,6	;RP1=0, select bank1
   930  0237  0196               	clrf	22	;volatile
   931  0238                     l1849:
   932                           
   933                           ;lib_adc.c: 170:     INTCONbits.RBIE = 0;
   934  0238  118B               	bcf	11,3	;volatile
   935  0239                     l1851:
   936                           
   937                           ;lib_adc.c: 171:     INTCONbits.T0IE = 0;
   938  0239  128B               	bcf	11,5	;volatile
   939  023A                     l1853:
   940                           
   941                           ;lib_adc.c: 172:     INTCONbits.PEIE = 1;
   942  023A  170B               	bsf	11,6	;volatile
   943  023B                     l1855:
   944                           
   945                           ;lib_adc.c: 173:     INTCONbits.GIE = 1;
   946  023B  178B               	bsf	11,7	;volatile
   947  023C                     l1857:
   948                           
   949                           ;lib_adc.c: 175:     OSCCON = 0b01100001;
   950  023C  3061               	movlw	97
   951  023D  008F               	movwf	15	;volatile
   952  023E                     l1859:
   953                           
   954                           ;lib_adc.c: 177:     OPTION_REGbits.T0CS = 0;
   955  023E  1281               	bcf	1,5	;volatile
   956  023F                     l1861:
   957                           
   958                           ;lib_adc.c: 178:     OPTION_REGbits.PSA = 0;
   959  023F  1181               	bcf	1,3	;volatile
   960  0240                     l1863:
   961                           
   962                           ;lib_adc.c: 179:     OPTION_REGbits.PS2 = 0;
   963  0240  1101               	bcf	1,2	;volatile
   964  0241                     l1865:
   965                           
   966                           ;lib_adc.c: 180:     OPTION_REGbits.PS1 = 0;
   967  0241  1081               	bcf	1,1	;volatile
   968  0242                     l1867:
   969                           
   970                           ;lib_adc.c: 181:     OPTION_REGbits.PS0 = 1;
   971  0242  1401               	bsf	1,0	;volatile
   972  0243                     l1869:
   973                           
   974                           ;lib_adc.c: 183:     TMR0 = 6;;
   975  0243  3006               	movlw	6
   976  0244  1283               	bcf	3,5	;RP0=0, select bank0
   977  0245  1303               	bcf	3,6	;RP1=0, select bank0
   978  0246  0081               	movwf	1	;volatile
   979  0247                     l1871:
   980                           
   981                           ;lib_adc.c: 185:     INTCONbits.T0IF = 0;
   982  0247  110B               	bcf	11,2	;volatile
   983  0248                     l1873:
   984                           
   985                           ;lib_adc.c: 190:     lcd_init();
   986  0248  120A  118A  22D1  120A  118A  	fcall	_lcd_init
   987  024D                     l1875:
   988                           
   989                           ;lib_adc.c: 191:     lcd_cmd(0x0c);
   990  024D  300C               	movlw	12
   991  024E  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
   992  0253                     l1877:
   993                           
   994                           ;lib_adc.c: 200:     ANSELHbits.ANS10 = 1;
   995  0253  1683               	bsf	3,5	;RP0=1, select bank3
   996  0254  1703               	bsf	3,6	;RP1=1, select bank3
   997  0255  1509               	bsf	9,2	;volatile
   998  0256                     l1879:
   999                           
  1000                           ;lib_adc.c: 201:     ANSELHbits.ANS12 = 1;
  1001  0256  1609               	bsf	9,4	;volatile
  1002  0257                     l1881:
  1003                           
  1004                           ;lib_adc.c: 206:     ADCON0bits.CHS0 = 1;
  1005  0257  1283               	bcf	3,5	;RP0=0, select bank0
  1006  0258  1303               	bcf	3,6	;RP1=0, select bank0
  1007  0259  151F               	bsf	31,2	;volatile
  1008  025A                     l1883:
  1009                           
  1010                           ;lib_adc.c: 207:     ADCON0bits.CHS1 = 0;
  1011  025A  119F               	bcf	31,3	;volatile
  1012  025B                     l1885:
  1013                           
  1014                           ;lib_adc.c: 208:     ADCON0bits.CHS2 = 1;
  1015  025B  161F               	bsf	31,4	;volatile
  1016  025C                     l1887:
  1017                           
  1018                           ;lib_adc.c: 209:     ADCON0bits.CHS3 = 0;
  1019  025C  129F               	bcf	31,5	;volatile
  1020  025D                     l1889:
  1021                           
  1022                           ;lib_adc.c: 212:     ADCON1bits.VCFG0 = 0;
  1023  025D  1683               	bsf	3,5	;RP0=1, select bank1
  1024  025E  1303               	bcf	3,6	;RP1=0, select bank1
  1025  025F  121F               	bcf	31,4	;volatile
  1026  0260                     l1891:
  1027                           
  1028                           ;lib_adc.c: 213:     ADCON1bits.VCFG1 = 0;
  1029  0260  129F               	bcf	31,5	;volatile
  1030  0261                     l1893:
  1031                           
  1032                           ;lib_adc.c: 216:     ADCON1bits.ADFM = 0;
  1033  0261  139F               	bcf	31,7	;volatile
  1034  0262                     l1895:
  1035                           
  1036                           ;lib_adc.c: 220:     ADCON0bits.GO_DONE = 1;
  1037  0262  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0263  1303               	bcf	3,6	;RP1=0, select bank0
  1039  0264  149F               	bsf	31,1	;volatile
  1040  0265                     l1897:
  1041                           
  1042                           ;lib_adc.c: 223:     ADCON0bits.ADON = 1;
  1043  0265  141F               	bsf	31,0	;volatile
  1044  0266                     l1899:
  1045                           
  1046                           ;lib_adc.c: 226:     INTCONbits.GIE = 1;
  1047  0266  178B               	bsf	11,7	;volatile
  1048  0267                     l1901:
  1049                           
  1050                           ;lib_adc.c: 227:     PIE1bits.ADIE = 0;
  1051  0267  1683               	bsf	3,5	;RP0=1, select bank1
  1052  0268  1303               	bcf	3,6	;RP1=0, select bank1
  1053  0269  130C               	bcf	12,6	;volatile
  1054  026A                     l1903:
  1055                           
  1056                           ;lib_adc.c: 228:     PIE1bits.ADIE = 1;
  1057  026A  170C               	bsf	12,6	;volatile
  1058  026B                     l1905:
  1059                           
  1060                           ;lib_adc.c: 230:     ban_an1 = 0;
  1061  026B  1283               	bcf	3,5	;RP0=0, select bank0
  1062  026C  1303               	bcf	3,6	;RP1=0, select bank0
  1063  026D  01BF               	clrf	_ban_an1
  1064  026E  01C0               	clrf	_ban_an1+1
  1065                           
  1066                           ;lib_adc.c: 231:     ban_an2 = 1;
  1067  026F  3001               	movlw	1
  1068  0270  00BD               	movwf	_ban_an2
  1069  0271  3000               	movlw	0
  1070  0272  00BE               	movwf	_ban_an2+1
  1071  0273                     l1907:
  1072                           
  1073                           ;lib_adc.c: 232:     canal_10();
  1074  0273  120A  118A  24D7  120A  118A  	fcall	_canal_10
  1075  0278                     l169:
  1076  0278  0008               	return
  1077  0279                     __end_of_setup:
  1078                           
  1079                           	psect	text2
  1080  02D1                     __ptext2:	
  1081 ;; *************** function _lcd_init *****************
  1082 ;; Defined at:
  1083 ;;		line 21 in file "lib_adc.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2, status,0, pclath, cstack
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1097 ;;      Params:         0       0       0       0       0
  1098 ;;      Locals:         0       0       0       0       0
  1099 ;;      Temps:          0       2       0       0       0
  1100 ;;      Totals:         0       2       0       0       0
  1101 ;;Total ram usage:        2 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; Hardware stack levels required when called:    3
  1104 ;; This function calls:
  1105 ;;		_lcd_cmd
  1106 ;;		_lcd_port
  1107 ;; This function is called by:
  1108 ;;		_setup
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           
  1113                           ;psect for function _lcd_init
  1114  02D1                     _lcd_init:
  1115  02D1                     l1815:	
  1116                           ;incstack = 0
  1117                           ; Regs used in _lcd_init: [wreg+status,2+status,0+pclath+cstack]
  1118                           
  1119                           
  1120                           ;lib_adc.c: 23:     lcd_port(0x00);
  1121  02D1  3000               	movlw	0
  1122  02D2  120A  118A  24E5  120A  118A  	fcall	_lcd_port
  1123  02D7                     l1817:
  1124                           
  1125                           ;lib_adc.c: 24:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1126  02D7  301A               	movlw	26
  1127  02D8  1283               	bcf	3,5	;RP0=0, select bank0
  1128  02D9  1303               	bcf	3,6	;RP1=0, select bank0
  1129  02DA  00A1               	movwf	??_lcd_init+1
  1130  02DB  30F7               	movlw	247
  1131  02DC  00A0               	movwf	??_lcd_init
  1132  02DD                     u1107:
  1133  02DD  0BA0               	decfsz	??_lcd_init,f
  1134  02DE  2ADD               	goto	u1107
  1135  02DF  0BA1               	decfsz	??_lcd_init+1,f
  1136  02E0  2ADD               	goto	u1107
  1137  02E1  2AE2               	nop2
  1138  02E2                     l1819:
  1139                           
  1140                           ;lib_adc.c: 26:     lcd_cmd(0x30);
  1141  02E2  3030               	movlw	48
  1142  02E3  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  1143                           
  1144                           ;lib_adc.c: 27:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1145  02E8  3007               	movlw	7
  1146  02E9  1283               	bcf	3,5	;RP0=0, select bank0
  1147  02EA  1303               	bcf	3,6	;RP1=0, select bank0
  1148  02EB  00A1               	movwf	??_lcd_init+1
  1149  02EC  307C               	movlw	124
  1150  02ED  00A0               	movwf	??_lcd_init
  1151  02EE                     u1117:
  1152  02EE  0BA0               	decfsz	??_lcd_init,f
  1153  02EF  2AEE               	goto	u1117
  1154  02F0  0BA1               	decfsz	??_lcd_init+1,f
  1155  02F1  2AEE               	goto	u1117
  1156  02F2  0000               	nop
  1157  02F3                     l1821:
  1158                           
  1159                           ;lib_adc.c: 29:     lcd_cmd(0x30);
  1160  02F3  3030               	movlw	48
  1161  02F4  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  1162  02F9                     l1823:
  1163                           
  1164                           ;lib_adc.c: 30:     _delay((unsigned long)((11)*(4000000/4000.0)));
  1165  02F9  300F               	movlw	15
  1166  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  1167  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  1168  02FC  00A1               	movwf	??_lcd_init+1
  1169  02FD  3047               	movlw	71
  1170  02FE  00A0               	movwf	??_lcd_init
  1171  02FF                     u1127:
  1172  02FF  0BA0               	decfsz	??_lcd_init,f
  1173  0300  2AFF               	goto	u1127
  1174  0301  0BA1               	decfsz	??_lcd_init+1,f
  1175  0302  2AFF               	goto	u1127
  1176                           
  1177                           ;lib_adc.c: 32:     lcd_cmd(0x30);
  1178  0303  3030               	movlw	48
  1179  0304  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  1180                           
  1181                           ;lib_adc.c: 34:     lcd_cmd(0x38);
  1182  0309  3038               	movlw	56
  1183  030A  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  1184                           
  1185                           ;lib_adc.c: 35:     lcd_cmd(0x10);
  1186  030F  3010               	movlw	16
  1187  0310  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  1188                           
  1189                           ;lib_adc.c: 36:     lcd_cmd(0x01);
  1190  0315  3001               	movlw	1
  1191  0316  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  1192                           
  1193                           ;lib_adc.c: 37:     lcd_cmd(0x06);
  1194  031B  3006               	movlw	6
  1195  031C  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  1196                           
  1197                           ;lib_adc.c: 38:     lcd_cmd(0x0F);
  1198  0321  300F               	movlw	15
  1199  0322  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  1200  0327                     l136:
  1201  0327  0008               	return
  1202  0328                     __end_of_lcd_init:
  1203                           
  1204                           	psect	text3
  1205  0184                     __ptext3:	
  1206 ;; *************** function _display *****************
  1207 ;; Defined at:
  1208 ;;		line 61 in file "rutina_adc.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;		None
  1211 ;; Auto vars:     Size  Location     Type
  1212 ;;  str             3   23[BANK0 ] PTR unsigned char [3]
  1213 ;;		 -> ?_sprintf(2), 
  1214 ;; Return value:  Size  Location     Type
  1215 ;;                  1    wreg      void 
  1216 ;; Registers used:
  1217 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1218 ;; Tracked objects:
  1219 ;;		On entry : 0/0
  1220 ;;		On exit  : 0/0
  1221 ;;		Unchanged: 0/0
  1222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1223 ;;      Params:         0       0       0       0       0
  1224 ;;      Locals:         0       3       0       0       0
  1225 ;;      Temps:          0       1       0       0       0
  1226 ;;      Totals:         0       4       0       0       0
  1227 ;;Total ram usage:        4 bytes
  1228 ;; Hardware stack levels used:    1
  1229 ;; Hardware stack levels required when called:    4
  1230 ;; This function calls:
  1231 ;;		_lcd_move_cursor
  1232 ;;		_lcd_write_char
  1233 ;;		_lcd_write_string
  1234 ;;		_sprintf
  1235 ;; This function is called by:
  1236 ;;		_main
  1237 ;; This function uses a non-reentrant model
  1238 ;;
  1239                           
  1240                           
  1241                           ;psect for function _display
  1242  0184                     _display:
  1243  0184                     l1911:	
  1244                           ;incstack = 0
  1245                           ; Regs used in _display: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1246                           
  1247                           
  1248                           ;rutina_adc.c: 63:     lcd_move_cursor(0,0);
  1249  0184  01F7               	clrf	lcd_move_cursor@col
  1250  0185  3000               	movlw	0
  1251  0186  120A  118A  242D  120A  118A  	fcall	_lcd_move_cursor
  1252  018B                     l1913:
  1253                           
  1254                           ;rutina_adc.c: 64:     lcd_write_string("  S1:  S2:  S3: ");
  1255  018B  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1256  018C  120A  118A  23DE  120A  118A  	fcall	_lcd_write_string
  1257  0191                     l1915:
  1258                           
  1259                           ;rutina_adc.c: 65:     lcd_move_cursor(1,0);
  1260  0191  01F7               	clrf	lcd_move_cursor@col
  1261  0192  3001               	movlw	1
  1262  0193  120A  118A  242D  120A  118A  	fcall	_lcd_move_cursor
  1263  0198                     l1917:
  1264                           
  1265                           ;rutina_adc.c: 67:     char* str[3];;rutina_adc.c: 69:     sprintf(str, "%.3i", uart_con
      +                          t);
  1266  0198  302A               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1267  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1268  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1269  019B  00B6               	movwf	??_display
  1270  019C  0836               	movf	??_display,w
  1271  019D  00A9               	movwf	sprintf@f
  1272  019E  3000               	movlw	0
  1273  019F  00AA               	movwf	?_sprintf+1
  1274  01A0  00AB               	movwf	?_sprintf+2
  1275  01A1  3037               	movlw	(low (display@str| 0))& (0+255)
  1276  01A2  120A  118A  201F  120A  118A  	fcall	_sprintf
  1277  01A7                     l1919:
  1278                           
  1279                           ;rutina_adc.c: 71:     lcd_write_char(str_pot_a[1]);
  1280  01A7  1283               	bcf	3,5	;RP0=0, select bank0
  1281  01A8  1303               	bcf	3,6	;RP1=0, select bank0
  1282  01A9  0846               	movf	_str_pot_a+1,w
  1283  01AA  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1284  01AF                     l1921:
  1285                           
  1286                           ;rutina_adc.c: 72:     lcd_write_char('.');
  1287  01AF  302E               	movlw	46
  1288  01B0  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1289  01B5                     l1923:
  1290                           
  1291                           ;rutina_adc.c: 73:     lcd_write_char(str_pot_a[2]);
  1292  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  1293  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  1294  01B7  0847               	movf	_str_pot_a+2,w
  1295  01B8  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1296  01BD                     l1925:
  1297                           
  1298                           ;rutina_adc.c: 74:     lcd_write_char(str_pot_a[3]);
  1299  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  1300  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  1301  01BF  0848               	movf	_str_pot_a+3,w
  1302  01C0  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1303  01C5                     l1927:
  1304                           
  1305                           ;rutina_adc.c: 75:     lcd_write_char(str_pot_a[4]);
  1306  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1307  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1308  01C7  0849               	movf	_str_pot_a+4,w
  1309  01C8  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1310  01CD                     l1929:
  1311                           
  1312                           ;rutina_adc.c: 76:     lcd_write_char(' ');
  1313  01CD  3020               	movlw	32
  1314  01CE  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1315  01D3                     l1931:
  1316                           
  1317                           ;rutina_adc.c: 78:     lcd_write_char(str_pot_b[1]);
  1318  01D3  1283               	bcf	3,5	;RP0=0, select bank0
  1319  01D4  1303               	bcf	3,6	;RP1=0, select bank0
  1320  01D5  084C               	movf	_str_pot_b+1,w
  1321  01D6  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1322  01DB                     l1933:
  1323                           
  1324                           ;rutina_adc.c: 79:     lcd_write_char('.');
  1325  01DB  302E               	movlw	46
  1326  01DC  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1327  01E1                     l1935:
  1328                           
  1329                           ;rutina_adc.c: 80:     lcd_write_char(str_pot_b[2]);
  1330  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  1331  01E2  1303               	bcf	3,6	;RP1=0, select bank0
  1332  01E3  084D               	movf	_str_pot_b+2,w
  1333  01E4  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1334  01E9                     l1937:
  1335                           
  1336                           ;rutina_adc.c: 81:     lcd_write_char(str_pot_b[3]);
  1337  01E9  1283               	bcf	3,5	;RP0=0, select bank0
  1338  01EA  1303               	bcf	3,6	;RP1=0, select bank0
  1339  01EB  084E               	movf	_str_pot_b+3,w
  1340  01EC  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1341  01F1                     l1939:
  1342                           
  1343                           ;rutina_adc.c: 82:     lcd_write_char(str_pot_b[4]);
  1344  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1345  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1346  01F3  084F               	movf	_str_pot_b+4,w
  1347  01F4  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1348  01F9                     l1941:
  1349                           
  1350                           ;rutina_adc.c: 83:     lcd_write_char(' ');
  1351  01F9  3020               	movlw	32
  1352  01FA  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1353  01FF                     l1943:
  1354                           
  1355                           ;rutina_adc.c: 85:     lcd_write_char(str[0]);
  1356  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1357  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1358  0201  0837               	movf	display@str,w
  1359  0202  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1360  0207                     l1945:
  1361                           
  1362                           ;rutina_adc.c: 86:     lcd_write_char(str[1]);
  1363  0207  1283               	bcf	3,5	;RP0=0, select bank0
  1364  0208  1303               	bcf	3,6	;RP1=0, select bank0
  1365  0209  0838               	movf	display@str+1,w
  1366  020A  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1367  020F                     l1947:
  1368                           
  1369                           ;rutina_adc.c: 87:     lcd_write_char(str[2]);
  1370  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1371  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1372  0211  0839               	movf	display@str+2,w
  1373  0212  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1374  0217                     l1949:
  1375                           
  1376                           ;rutina_adc.c: 88:     lcd_write_char(str[3]);
  1377  0217  1283               	bcf	3,5	;RP0=0, select bank0
  1378  0218  1303               	bcf	3,6	;RP1=0, select bank0
  1379  0219  083A               	movf	display@str+3,w
  1380  021A  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  1381  021F                     l57:
  1382  021F  0008               	return
  1383  0220                     __end_of_display:
  1384                           
  1385                           	psect	text4
  1386  001F                     __ptext4:	
  1387 ;; *************** function _sprintf *****************
  1388 ;; Defined at:
  1389 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1390 ;; Parameters:    Size  Location     Type
  1391 ;;  sp              1    wreg     PTR unsigned char 
  1392 ;;		 -> display@str(3), str_pot_b(5), str_pot_a(6), 
  1393 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  1394 ;;		 -> STR_4(5), STR_2(7), STR_1(7), 
  1395 ;; Auto vars:     Size  Location     Type
  1396 ;;  sp              1   19[BANK0 ] PTR unsigned char 
  1397 ;;		 -> display@str(3), str_pot_b(5), str_pot_a(6), 
  1398 ;;  tmpval          4    0        struct .
  1399 ;;  val             2   17[BANK0 ] unsigned int 
  1400 ;;  cp              2    0        PTR const unsigned char 
  1401 ;;  len             2    0        unsigned int 
  1402 ;;  c               1   21[BANK0 ] unsigned char 
  1403 ;;  prec            1   20[BANK0 ] char 
  1404 ;;  flag            1   16[BANK0 ] unsigned char 
  1405 ;;  ap              1   15[BANK0 ] PTR void [1]
  1406 ;;		 -> ?_sprintf(2), 
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  2    9[BANK0 ] int 
  1409 ;; Registers used:
  1410 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1416 ;;      Params:         0       3       0       0       0
  1417 ;;      Locals:         0       7       0       0       0
  1418 ;;      Temps:          0       3       0       0       0
  1419 ;;      Totals:         0      13       0       0       0
  1420 ;;Total ram usage:       13 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    2
  1423 ;; This function calls:
  1424 ;;		___bmul
  1425 ;;		___lwdiv
  1426 ;;		___lwmod
  1427 ;;		_isdigit
  1428 ;; This function is called by:
  1429 ;;		_main
  1430 ;;		_display
  1431 ;; This function uses a non-reentrant model
  1432 ;;
  1433                           
  1434                           
  1435                           ;psect for function _sprintf
  1436  001F                     _sprintf:
  1437                           
  1438                           ;incstack = 0
  1439                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1440                           ;sprintf@sp stored from wreg
  1441  001F  1283               	bcf	3,5	;RP0=0, select bank0
  1442  0020  1303               	bcf	3,6	;RP1=0, select bank0
  1443  0021  00B3               	movwf	sprintf@sp
  1444  0022                     l1709:
  1445                           
  1446                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1447  0022  302A               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1448  0023  00AC               	movwf	??_sprintf
  1449  0024  082C               	movf	??_sprintf,w
  1450  0025  00AF               	movwf	sprintf@ap
  1451                           
  1452                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1453  0026  296D               	goto	l1787
  1454  0027                     l1711:
  1455                           
  1456                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1457  0027  3025               	movlw	37
  1458  0028  0635               	xorwf	sprintf@c,w
  1459  0029  1903               	btfsc	3,2
  1460  002A  282C               	goto	u901
  1461  002B  282D               	goto	u900
  1462  002C                     u901:
  1463  002C  2839               	goto	l1717
  1464  002D                     u900:
  1465  002D                     l1713:
  1466                           
  1467                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1468  002D  0835               	movf	sprintf@c,w
  1469  002E  00AC               	movwf	??_sprintf
  1470  002F  0833               	movf	sprintf@sp,w
  1471  0030  0084               	movwf	4
  1472  0031  082C               	movf	??_sprintf,w
  1473  0032  1383               	bcf	3,7	;select IRP bank0
  1474  0033  0080               	movwf	0
  1475  0034                     l1715:
  1476  0034  3001               	movlw	1
  1477  0035  00AC               	movwf	??_sprintf
  1478  0036  082C               	movf	??_sprintf,w
  1479  0037  07B3               	addwf	sprintf@sp,f
  1480                           
  1481                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1482  0038  296D               	goto	l1787
  1483  0039                     l1717:
  1484                           
  1485                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1486  0039  01B0               	clrf	sprintf@flag
  1487  003A                     l1719:
  1488                           
  1489                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 628:   if(*f == '
      +                          .') {
  1490  003A  0829               	movf	sprintf@f,w
  1491  003B  0084               	movwf	4
  1492  003C  120A  118A  23AA  120A  118A  	fcall	stringdir
  1493  0041  3A2E               	xorlw	46
  1494  0042  1D03               	skipz
  1495  0043  2845               	goto	u911
  1496  0044  2846               	goto	u910
  1497  0045                     u911:
  1498  0045  287D               	goto	l1733
  1499  0046                     u910:
  1500  0046                     l1721:
  1501                           
  1502                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 630:    f++;
  1503  0046  3001               	movlw	1
  1504  0047  00AC               	movwf	??_sprintf
  1505  0048  082C               	movf	??_sprintf,w
  1506  0049  07A9               	addwf	sprintf@f,f
  1507  004A                     l1723:
  1508                           
  1509                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 644:    {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 645:     prec = 0;
  1510  004A  01B4               	clrf	sprintf@prec
  1511                           
  1512                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  1513  004B  286C               	goto	l1731
  1514  004C                     l1725:
  1515                           
  1516                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 647:      prec *=
      +                           10;
  1517  004C  1283               	bcf	3,5	;RP0=0, select bank0
  1518  004D  1303               	bcf	3,6	;RP1=0, select bank0
  1519  004E  0834               	movf	sprintf@prec,w
  1520  004F  00AC               	movwf	??_sprintf
  1521  0050  082C               	movf	??_sprintf,w
  1522  0051  00F3               	movwf	___bmul@multiplicand
  1523  0052  300A               	movlw	10
  1524  0053  120A  118A  247E  120A  118A  	fcall	___bmul
  1525  0058  1283               	bcf	3,5	;RP0=0, select bank0
  1526  0059  1303               	bcf	3,6	;RP1=0, select bank0
  1527  005A  00AD               	movwf	??_sprintf+1
  1528  005B  082D               	movf	??_sprintf+1,w
  1529  005C  00B4               	movwf	sprintf@prec
  1530  005D                     l1727:
  1531                           
  1532                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 648:         prec
      +                           += *f++ - '0';
  1533  005D  0829               	movf	sprintf@f,w
  1534  005E  0084               	movwf	4
  1535  005F  120A  118A  23AA  120A  118A  	fcall	stringdir
  1536  0064  3ED0               	addlw	-48
  1537  0065  00AC               	movwf	??_sprintf
  1538  0066  082C               	movf	??_sprintf,w
  1539  0067  07B4               	addwf	sprintf@prec,f
  1540  0068                     l1729:
  1541  0068  3001               	movlw	1
  1542  0069  00AC               	movwf	??_sprintf
  1543  006A  082C               	movf	??_sprintf,w
  1544  006B  07A9               	addwf	sprintf@f,f
  1545  006C                     l1731:
  1546                           
  1547                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 646:     while(is
      +                          digit((unsigned)*f)) {
  1548  006C  0829               	movf	sprintf@f,w
  1549  006D  0084               	movwf	4
  1550  006E  120A  118A  23AA  120A  118A  	fcall	stringdir
  1551  0073  120A  118A  24BD  120A  118A  	fcall	_isdigit
  1552  0078  1803               	btfsc	3,0
  1553  0079  287B               	goto	u921
  1554  007A  287C               	goto	u920
  1555  007B                     u921:
  1556  007B  284C               	goto	l1725
  1557  007C                     u920:
  1558  007C  287E               	goto	l1737
  1559  007D                     l1733:
  1560                           
  1561                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 652:    prec = 0;
  1562  007D  01B4               	clrf	sprintf@prec
  1563  007E                     l1737:
  1564  007E  3001               	movlw	1
  1565  007F  1283               	bcf	3,5	;RP0=0, select bank0
  1566  0080  1303               	bcf	3,6	;RP1=0, select bank0
  1567  0081  07A9               	addwf	sprintf@f,f
  1568  0082  30FF               	movlw	-1
  1569  0083  0729               	addwf	sprintf@f,w
  1570  0084  0084               	movwf	4
  1571  0085  120A  118A  23AA  120A  118A  	fcall	stringdir
  1572  008A  00B5               	movwf	sprintf@c
  1573  008B  00AC               	movwf	??_sprintf
  1574  008C  01AD               	clrf	??_sprintf+1
  1575                           
  1576                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1577                           ; Switch size 1, requested type "simple"
  1578                           ; Number of cases is 1, Range of values is 0 to 0
  1579                           ; switch strategies available:
  1580                           ; Name         Instructions Cycles
  1581                           ; simple_byte            4     3 (average)
  1582                           ; direct_byte           11     8 (fixed)
  1583                           ; jumptable            260     6 (fixed)
  1584                           ;	Chosen strategy is simple_byte
  1585  008D  082D               	movf	??_sprintf+1,w
  1586  008E  3A00               	xorlw	0	; case 0
  1587  008F  1903               	skipnz
  1588  0090  2892               	goto	l2007
  1589  0091  296D               	goto	l1787
  1590  0092                     l2007:
  1591                           
  1592                           ; Switch size 1, requested type "simple"
  1593                           ; Number of cases is 3, Range of values is 0 to 105
  1594                           ; switch strategies available:
  1595                           ; Name         Instructions Cycles
  1596                           ; simple_byte           10     6 (average)
  1597                           ; jumptable            260     6 (fixed)
  1598                           ;	Chosen strategy is simple_byte
  1599  0092  082C               	movf	??_sprintf,w
  1600  0093  3A00               	xorlw	0	; case 0
  1601  0094  1903               	skipnz
  1602  0095  297F               	goto	l1789
  1603  0096  3A64               	xorlw	100	; case 100
  1604  0097  1903               	skipnz
  1605  0098  289D               	goto	l1739
  1606  0099  3A0D               	xorlw	13	; case 105
  1607  009A  1903               	skipnz
  1608  009B  289D               	goto	l1739
  1609  009C  296D               	goto	l1787
  1610  009D                     l1739:
  1611                           
  1612                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1613  009D  082F               	movf	sprintf@ap,w
  1614  009E  0084               	movwf	4
  1615  009F  1383               	bcf	3,7	;select IRP bank0
  1616  00A0  0800               	movf	0,w
  1617  00A1  00B1               	movwf	sprintf@val
  1618  00A2  0A84               	incf	4,f
  1619  00A3  0800               	movf	0,w
  1620  00A4  00B2               	movwf	sprintf@val+1
  1621  00A5                     l1741:
  1622  00A5  3002               	movlw	2
  1623  00A6  00AC               	movwf	??_sprintf
  1624  00A7  082C               	movf	??_sprintf,w
  1625  00A8  07AF               	addwf	sprintf@ap,f
  1626  00A9                     l1743:
  1627                           
  1628                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1629  00A9  1FB2               	btfss	sprintf@val+1,7
  1630  00AA  28AC               	goto	u931
  1631  00AB  28AD               	goto	u930
  1632  00AC                     u931:
  1633  00AC  28B6               	goto	l1749
  1634  00AD                     u930:
  1635  00AD                     l1745:
  1636                           
  1637                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1638  00AD  3003               	movlw	3
  1639  00AE  00AC               	movwf	??_sprintf
  1640  00AF  082C               	movf	??_sprintf,w
  1641  00B0  04B0               	iorwf	sprintf@flag,f
  1642  00B1                     l1747:
  1643                           
  1644                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1645  00B1  09B1               	comf	sprintf@val,f
  1646  00B2  09B2               	comf	sprintf@val+1,f
  1647  00B3  0AB1               	incf	sprintf@val,f
  1648  00B4  1903               	skipnz
  1649  00B5  0AB2               	incf	sprintf@val+1,f
  1650  00B6                     l1749:
  1651                           
  1652                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1316:   if(prec == 0 && v
      +                          al == 0)
  1653  00B6  0834               	movf	sprintf@prec,w
  1654  00B7  1D03               	btfss	3,2
  1655  00B8  28BA               	goto	u941
  1656  00B9  28BB               	goto	u940
  1657  00BA                     u941:
  1658  00BA  28C5               	goto	l1755
  1659  00BB                     u940:
  1660  00BB                     l1751:
  1661  00BB  0831               	movf	sprintf@val,w
  1662  00BC  0432               	iorwf	sprintf@val+1,w
  1663  00BD  1D03               	btfss	3,2
  1664  00BE  28C0               	goto	u951
  1665  00BF  28C1               	goto	u950
  1666  00C0                     u951:
  1667  00C0  28C5               	goto	l1755
  1668  00C1                     u950:
  1669  00C1                     l1753:
  1670                           
  1671                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1317:    prec++;
  1672  00C1  3001               	movlw	1
  1673  00C2  00AC               	movwf	??_sprintf
  1674  00C3  082C               	movf	??_sprintf,w
  1675  00C4  07B4               	addwf	sprintf@prec,f
  1676  00C5                     l1755:
  1677                           
  1678                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 
      +                          1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1679  00C5  01B5               	clrf	sprintf@c
  1680  00C6  0AB5               	incf	sprintf@c,f
  1681  00C7                     l1759:
  1682                           
  1683                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1684  00C7  0835               	movf	sprintf@c,w
  1685  00C8  00AC               	movwf	??_sprintf
  1686  00C9  072C               	addwf	??_sprintf,w
  1687  00CA  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1688  00CB  0084               	movwf	4
  1689  00CC  120A  118A  23AA  120A  118A  	fcall	stringdir
  1690  00D1  00AD               	movwf	??_sprintf+1
  1691  00D2  120A  118A  23AA  120A  118A  	fcall	stringdir
  1692  00D7  00AE               	movwf	??_sprintf+2
  1693  00D8  082E               	movf	??_sprintf+2,w
  1694  00D9  0232               	subwf	sprintf@val+1,w
  1695  00DA  1D03               	skipz
  1696  00DB  28DE               	goto	u965
  1697  00DC  082D               	movf	??_sprintf+1,w
  1698  00DD  0231               	subwf	sprintf@val,w
  1699  00DE                     u965:
  1700  00DE  1803               	skipnc
  1701  00DF  28E1               	goto	u961
  1702  00E0  28E2               	goto	u960
  1703  00E1                     u961:
  1704  00E1  28E3               	goto	l1763
  1705  00E2                     u960:
  1706  00E2  28ED               	goto	l1765
  1707  00E3                     l1763:
  1708  00E3  3001               	movlw	1
  1709  00E4  00AC               	movwf	??_sprintf
  1710  00E5  082C               	movf	??_sprintf,w
  1711  00E6  07B5               	addwf	sprintf@c,f
  1712  00E7  3005               	movlw	5
  1713  00E8  0635               	xorwf	sprintf@c,w
  1714  00E9  1D03               	btfss	3,2
  1715  00EA  28EC               	goto	u971
  1716  00EB  28ED               	goto	u970
  1717  00EC                     u971:
  1718  00EC  28C7               	goto	l1759
  1719  00ED                     u970:
  1720  00ED                     l1765:
  1721                           
  1722                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1365:   if(c < pr
      +                          ec)
  1723  00ED  0834               	movf	sprintf@prec,w
  1724  00EE  00AC               	movwf	??_sprintf
  1725  00EF  01AD               	clrf	??_sprintf+1
  1726  00F0  1BAC               	btfsc	??_sprintf,7
  1727  00F1  03AD               	decf	??_sprintf+1,f
  1728  00F2  082D               	movf	??_sprintf+1,w
  1729  00F3  3A80               	xorlw	128
  1730  00F4  3C80               	sublw	128
  1731  00F5  1D03               	skipz
  1732  00F6  28F9               	goto	u985
  1733  00F7  082C               	movf	??_sprintf,w
  1734  00F8  0235               	subwf	sprintf@c,w
  1735  00F9                     u985:
  1736  00F9  1803               	skipnc
  1737  00FA  28FC               	goto	u981
  1738  00FB  28FD               	goto	u980
  1739  00FC                     u981:
  1740  00FC  28FE               	goto	l1769
  1741  00FD                     u980:
  1742  00FD                     l1767:
  1743  00FD  2918               	goto	l1773
  1744  00FE                     l1769:
  1745  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1746  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1747  0100  0834               	movf	sprintf@prec,w
  1748  0101  00AC               	movwf	??_sprintf
  1749  0102  01AD               	clrf	??_sprintf+1
  1750  0103  1BAC               	btfsc	??_sprintf,7
  1751  0104  03AD               	decf	??_sprintf+1,f
  1752  0105  082D               	movf	??_sprintf+1,w
  1753  0106  3A80               	xorlw	128
  1754  0107  00AE               	movwf	??_sprintf+2
  1755  0108  3080               	movlw	128
  1756  0109  022E               	subwf	??_sprintf+2,w
  1757  010A  1D03               	skipz
  1758  010B  290E               	goto	u995
  1759  010C  0835               	movf	sprintf@c,w
  1760  010D  022C               	subwf	??_sprintf,w
  1761  010E                     u995:
  1762  010E  1803               	skipnc
  1763  010F  2911               	goto	u991
  1764  0110  2912               	goto	u990
  1765  0111                     u991:
  1766  0111  2918               	goto	l1773
  1767  0112                     u990:
  1768  0112                     l1771:
  1769                           
  1770                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1368:    prec = c
      +                          ;
  1771  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1772  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1773  0114  0835               	movf	sprintf@c,w
  1774  0115  00AC               	movwf	??_sprintf
  1775  0116  082C               	movf	??_sprintf,w
  1776  0117  00B4               	movwf	sprintf@prec
  1777  0118                     l1773:
  1778                           
  1779                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1780  0118  1283               	bcf	3,5	;RP0=0, select bank0
  1781  0119  1303               	bcf	3,6	;RP1=0, select bank0
  1782  011A  0830               	movf	sprintf@flag,w
  1783  011B  3903               	andlw	3
  1784  011C  1903               	btfsc	3,2
  1785  011D  291F               	goto	u1001
  1786  011E  2920               	goto	u1000
  1787  011F                     u1001:
  1788  011F  2964               	goto	l1785
  1789  0120                     u1000:
  1790  0120                     l1775:
  1791                           
  1792                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1793  0120  302D               	movlw	45
  1794  0121  00AC               	movwf	??_sprintf
  1795  0122  0833               	movf	sprintf@sp,w
  1796  0123  0084               	movwf	4
  1797  0124  082C               	movf	??_sprintf,w
  1798  0125  1383               	bcf	3,7	;select IRP bank0
  1799  0126  0080               	movwf	0
  1800  0127                     l1777:
  1801  0127  3001               	movlw	1
  1802  0128  00AC               	movwf	??_sprintf
  1803  0129  082C               	movf	??_sprintf,w
  1804  012A  07B3               	addwf	sprintf@sp,f
  1805  012B  2964               	goto	l1785
  1806  012C                     l1779:
  1807                           
  1808                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1809  012C  300A               	movlw	10
  1810  012D  00A3               	movwf	___lwmod@divisor
  1811  012E  3000               	movlw	0
  1812  012F  00A4               	movwf	___lwmod@divisor+1
  1813  0130  0834               	movf	sprintf@prec,w
  1814  0131  00AC               	movwf	??_sprintf
  1815  0132  072C               	addwf	??_sprintf,w
  1816  0133  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1817  0134  0084               	movwf	4
  1818  0135  120A  118A  23AA  120A  118A  	fcall	stringdir
  1819  013A  00F3               	movwf	___lwdiv@divisor
  1820  013B  120A  118A  23AA  120A  118A  	fcall	stringdir
  1821  0140  00F4               	movwf	___lwdiv@divisor+1
  1822  0141  0832               	movf	sprintf@val+1,w
  1823  0142  00F6               	movwf	___lwdiv@dividend+1
  1824  0143  0831               	movf	sprintf@val,w
  1825  0144  00F5               	movwf	___lwdiv@dividend
  1826  0145  120A  118A  2328  120A  118A  	fcall	___lwdiv
  1827  014A  0874               	movf	?___lwdiv+1,w
  1828  014B  1283               	bcf	3,5	;RP0=0, select bank0
  1829  014C  1303               	bcf	3,6	;RP1=0, select bank0
  1830  014D  00A6               	movwf	___lwmod@dividend+1
  1831  014E  0873               	movf	?___lwdiv,w
  1832  014F  00A5               	movwf	___lwmod@dividend
  1833  0150  120A  118A  236E  120A  118A  	fcall	___lwmod
  1834  0155  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0156  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0157  0823               	movf	?___lwmod,w
  1837  0158  3E30               	addlw	48
  1838  0159  00AD               	movwf	??_sprintf+1
  1839  015A  082D               	movf	??_sprintf+1,w
  1840  015B  00B5               	movwf	sprintf@c
  1841  015C                     l1781:
  1842                           
  1843                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1844  015C  0835               	movf	sprintf@c,w
  1845  015D  00AC               	movwf	??_sprintf
  1846  015E  0833               	movf	sprintf@sp,w
  1847  015F  0084               	movwf	4
  1848  0160  082C               	movf	??_sprintf,w
  1849  0161  1383               	bcf	3,7	;select IRP bank0
  1850  0162  0080               	movwf	0
  1851  0163  2927               	goto	l1777
  1852  0164                     l1785:
  1853                           
  1854                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1855  0164  30FF               	movlw	255
  1856  0165  00AC               	movwf	??_sprintf
  1857  0166  082C               	movf	??_sprintf,w
  1858  0167  07B4               	addwf	sprintf@prec,f
  1859  0168  0A34               	incf	sprintf@prec,w
  1860  0169  1D03               	btfss	3,2
  1861  016A  296C               	goto	u1011
  1862  016B  296D               	goto	u1010
  1863  016C                     u1011:
  1864  016C  292C               	goto	l1779
  1865  016D                     u1010:
  1866  016D                     l1787:
  1867                           
  1868                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1869  016D  3001               	movlw	1
  1870  016E  07A9               	addwf	sprintf@f,f
  1871  016F  30FF               	movlw	-1
  1872  0170  0729               	addwf	sprintf@f,w
  1873  0171  0084               	movwf	4
  1874  0172  120A  118A  23AA  120A  118A  	fcall	stringdir
  1875  0177  00AC               	movwf	??_sprintf
  1876  0178  082C               	movf	??_sprintf,w
  1877  0179  00B5               	movwf	sprintf@c
  1878  017A  0835               	movf	sprintf@c,w
  1879  017B  1D03               	btfss	3,2
  1880  017C  297E               	goto	u1021
  1881  017D  297F               	goto	u1020
  1882  017E                     u1021:
  1883  017E  2827               	goto	l1711
  1884  017F                     u1020:
  1885  017F                     l1789:
  1886                           
  1887                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1888  017F  0833               	movf	sprintf@sp,w
  1889  0180  0084               	movwf	4
  1890  0181  1383               	bcf	3,7	;select IRP bank0
  1891  0182  0180               	clrf	0
  1892  0183                     l290:
  1893  0183  0008               	return
  1894  0184                     __end_of_sprintf:
  1895                           
  1896                           	psect	text5
  1897  04BD                     __ptext5:	
  1898 ;; *************** function _isdigit *****************
  1899 ;; Defined at:
  1900 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\isdigit.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;  c               1    wreg     unsigned char 
  1903 ;; Auto vars:     Size  Location     Type
  1904 ;;  c               1    4[COMMON] unsigned char 
  1905 ;; Return value:  Size  Location     Type
  1906 ;;		None               void
  1907 ;; Registers used:
  1908 ;;		wreg, status,2, status,0
  1909 ;; Tracked objects:
  1910 ;;		On entry : 0/0
  1911 ;;		On exit  : 0/0
  1912 ;;		Unchanged: 0/0
  1913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1914 ;;      Params:         0       0       0       0       0
  1915 ;;      Locals:         2       0       0       0       0
  1916 ;;      Temps:          0       0       0       0       0
  1917 ;;      Totals:         2       0       0       0       0
  1918 ;;Total ram usage:        2 bytes
  1919 ;; Hardware stack levels used:    1
  1920 ;; Hardware stack levels required when called:    1
  1921 ;; This function calls:
  1922 ;;		Nothing
  1923 ;; This function is called by:
  1924 ;;		_sprintf
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           
  1929                           ;psect for function _isdigit
  1930  04BD                     _isdigit:
  1931                           
  1932                           ;incstack = 0
  1933                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  1934                           ;isdigit@c stored from wreg
  1935  04BD  00F4               	movwf	isdigit@c
  1936  04BE                     l1255:
  1937  04BE  01F3               	clrf	_isdigit$871
  1938  04BF                     l1257:
  1939  04BF  303A               	movlw	58
  1940  04C0  0274               	subwf	isdigit@c,w
  1941  04C1  1803               	skipnc
  1942  04C2  2CC4               	goto	u421
  1943  04C3  2CC5               	goto	u420
  1944  04C4                     u421:
  1945  04C4  2CCD               	goto	l1263
  1946  04C5                     u420:
  1947  04C5                     l1259:
  1948  04C5  3030               	movlw	48
  1949  04C6  0274               	subwf	isdigit@c,w
  1950  04C7  1C03               	skipc
  1951  04C8  2CCA               	goto	u431
  1952  04C9  2CCB               	goto	u430
  1953  04CA                     u431:
  1954  04CA  2CCD               	goto	l1263
  1955  04CB                     u430:
  1956  04CB                     l1261:
  1957  04CB  01F3               	clrf	_isdigit$871
  1958  04CC  0AF3               	incf	_isdigit$871,f
  1959  04CD                     l1263:
  1960  04CD  0C73               	rrf	_isdigit$871,w
  1961  04CE                     l747:
  1962  04CE  0008               	return
  1963  04CF                     __end_of_isdigit:
  1964                           
  1965                           	psect	text6
  1966  036E                     __ptext6:	
  1967 ;; *************** function ___lwmod *****************
  1968 ;; Defined at:
  1969 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1970 ;; Parameters:    Size  Location     Type
  1971 ;;  divisor         2    3[BANK0 ] unsigned int 
  1972 ;;  dividend        2    5[BANK0 ] unsigned int 
  1973 ;; Auto vars:     Size  Location     Type
  1974 ;;  counter         1    8[BANK0 ] unsigned char 
  1975 ;; Return value:  Size  Location     Type
  1976 ;;                  2    3[BANK0 ] unsigned int 
  1977 ;; Registers used:
  1978 ;;		wreg, status,2, status,0
  1979 ;; Tracked objects:
  1980 ;;		On entry : 0/0
  1981 ;;		On exit  : 0/0
  1982 ;;		Unchanged: 0/0
  1983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1984 ;;      Params:         0       4       0       0       0
  1985 ;;      Locals:         0       1       0       0       0
  1986 ;;      Temps:          0       1       0       0       0
  1987 ;;      Totals:         0       6       0       0       0
  1988 ;;Total ram usage:        6 bytes
  1989 ;; Hardware stack levels used:    1
  1990 ;; Hardware stack levels required when called:    1
  1991 ;; This function calls:
  1992 ;;		Nothing
  1993 ;; This function is called by:
  1994 ;;		_sprintf
  1995 ;; This function uses a non-reentrant model
  1996 ;;
  1997                           
  1998                           
  1999                           ;psect for function ___lwmod
  2000  036E                     ___lwmod:
  2001  036E                     l1307:	
  2002                           ;incstack = 0
  2003                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2004                           
  2005  036E  1283               	bcf	3,5	;RP0=0, select bank0
  2006  036F  1303               	bcf	3,6	;RP1=0, select bank0
  2007  0370  0823               	movf	___lwmod@divisor,w
  2008  0371  0424               	iorwf	___lwmod@divisor+1,w
  2009  0372  1903               	btfsc	3,2
  2010  0373  2B75               	goto	u531
  2011  0374  2B76               	goto	u530
  2012  0375                     u531:
  2013  0375  2BA5               	goto	l1325
  2014  0376                     u530:
  2015  0376                     l1309:
  2016  0376  01A8               	clrf	___lwmod@counter
  2017  0377  0AA8               	incf	___lwmod@counter,f
  2018  0378  2B84               	goto	l1315
  2019  0379                     l1311:
  2020  0379  3001               	movlw	1
  2021  037A                     u545:
  2022  037A  1003               	clrc
  2023  037B  0DA3               	rlf	___lwmod@divisor,f
  2024  037C  0DA4               	rlf	___lwmod@divisor+1,f
  2025  037D  3EFF               	addlw	-1
  2026  037E  1D03               	skipz
  2027  037F  2B7A               	goto	u545
  2028  0380                     l1313:
  2029  0380  3001               	movlw	1
  2030  0381  00A7               	movwf	??___lwmod
  2031  0382  0827               	movf	??___lwmod,w
  2032  0383  07A8               	addwf	___lwmod@counter,f
  2033  0384                     l1315:
  2034  0384  1FA4               	btfss	___lwmod@divisor+1,7
  2035  0385  2B87               	goto	u551
  2036  0386  2B88               	goto	u550
  2037  0387                     u551:
  2038  0387  2B79               	goto	l1311
  2039  0388                     u550:
  2040  0388                     l1317:
  2041  0388  0824               	movf	___lwmod@divisor+1,w
  2042  0389  0226               	subwf	___lwmod@dividend+1,w
  2043  038A  1D03               	skipz
  2044  038B  2B8E               	goto	u565
  2045  038C  0823               	movf	___lwmod@divisor,w
  2046  038D  0225               	subwf	___lwmod@dividend,w
  2047  038E                     u565:
  2048  038E  1C03               	skipc
  2049  038F  2B91               	goto	u561
  2050  0390  2B92               	goto	u560
  2051  0391                     u561:
  2052  0391  2B98               	goto	l1321
  2053  0392                     u560:
  2054  0392                     l1319:
  2055  0392  0823               	movf	___lwmod@divisor,w
  2056  0393  02A5               	subwf	___lwmod@dividend,f
  2057  0394  0824               	movf	___lwmod@divisor+1,w
  2058  0395  1C03               	skipc
  2059  0396  03A6               	decf	___lwmod@dividend+1,f
  2060  0397  02A6               	subwf	___lwmod@dividend+1,f
  2061  0398                     l1321:
  2062  0398  3001               	movlw	1
  2063  0399                     u575:
  2064  0399  1003               	clrc
  2065  039A  0CA4               	rrf	___lwmod@divisor+1,f
  2066  039B  0CA3               	rrf	___lwmod@divisor,f
  2067  039C  3EFF               	addlw	-1
  2068  039D  1D03               	skipz
  2069  039E  2B99               	goto	u575
  2070  039F                     l1323:
  2071  039F  3001               	movlw	1
  2072  03A0  02A8               	subwf	___lwmod@counter,f
  2073  03A1  1D03               	btfss	3,2
  2074  03A2  2BA4               	goto	u581
  2075  03A3  2BA5               	goto	u580
  2076  03A4                     u581:
  2077  03A4  2B88               	goto	l1317
  2078  03A5                     u580:
  2079  03A5                     l1325:
  2080  03A5  0826               	movf	___lwmod@dividend+1,w
  2081  03A6  00A4               	movwf	?___lwmod+1
  2082  03A7  0825               	movf	___lwmod@dividend,w
  2083  03A8  00A3               	movwf	?___lwmod
  2084  03A9                     l576:
  2085  03A9  0008               	return
  2086  03AA                     __end_of___lwmod:
  2087                           
  2088                           	psect	text7
  2089  0328                     __ptext7:	
  2090 ;; *************** function ___lwdiv *****************
  2091 ;; Defined at:
  2092 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  2093 ;; Parameters:    Size  Location     Type
  2094 ;;  divisor         2    3[COMMON] unsigned int 
  2095 ;;  dividend        2    5[COMMON] unsigned int 
  2096 ;; Auto vars:     Size  Location     Type
  2097 ;;  quotient        2    1[BANK0 ] unsigned int 
  2098 ;;  counter         1    0[BANK0 ] unsigned char 
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  2    3[COMMON] unsigned int 
  2101 ;; Registers used:
  2102 ;;		wreg, status,2, status,0
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2108 ;;      Params:         4       0       0       0       0
  2109 ;;      Locals:         0       3       0       0       0
  2110 ;;      Temps:          1       0       0       0       0
  2111 ;;      Totals:         5       3       0       0       0
  2112 ;;Total ram usage:        8 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    1
  2115 ;; This function calls:
  2116 ;;		Nothing
  2117 ;; This function is called by:
  2118 ;;		_sprintf
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           
  2123                           ;psect for function ___lwdiv
  2124  0328                     ___lwdiv:
  2125  0328                     l1683:	
  2126                           ;incstack = 0
  2127                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2128                           
  2129  0328  1283               	bcf	3,5	;RP0=0, select bank0
  2130  0329  1303               	bcf	3,6	;RP1=0, select bank0
  2131  032A  01A1               	clrf	___lwdiv@quotient
  2132  032B  01A2               	clrf	___lwdiv@quotient+1
  2133  032C                     l1685:
  2134  032C  0873               	movf	___lwdiv@divisor,w
  2135  032D  0474               	iorwf	___lwdiv@divisor+1,w
  2136  032E  1903               	btfsc	3,2
  2137  032F  2B31               	goto	u831
  2138  0330  2B32               	goto	u830
  2139  0331                     u831:
  2140  0331  2B69               	goto	l1705
  2141  0332                     u830:
  2142  0332                     l1687:
  2143  0332  01A0               	clrf	___lwdiv@counter
  2144  0333  0AA0               	incf	___lwdiv@counter,f
  2145  0334  2B40               	goto	l1693
  2146  0335                     l1689:
  2147  0335  3001               	movlw	1
  2148  0336                     u845:
  2149  0336  1003               	clrc
  2150  0337  0DF3               	rlf	___lwdiv@divisor,f
  2151  0338  0DF4               	rlf	___lwdiv@divisor+1,f
  2152  0339  3EFF               	addlw	-1
  2153  033A  1D03               	skipz
  2154  033B  2B36               	goto	u845
  2155  033C                     l1691:
  2156  033C  3001               	movlw	1
  2157  033D  00F7               	movwf	??___lwdiv
  2158  033E  0877               	movf	??___lwdiv,w
  2159  033F  07A0               	addwf	___lwdiv@counter,f
  2160  0340                     l1693:
  2161  0340  1FF4               	btfss	___lwdiv@divisor+1,7
  2162  0341  2B43               	goto	u851
  2163  0342  2B44               	goto	u850
  2164  0343                     u851:
  2165  0343  2B35               	goto	l1689
  2166  0344                     u850:
  2167  0344                     l1695:
  2168  0344  3001               	movlw	1
  2169  0345                     u865:
  2170  0345  1003               	clrc
  2171  0346  0DA1               	rlf	___lwdiv@quotient,f
  2172  0347  0DA2               	rlf	___lwdiv@quotient+1,f
  2173  0348  3EFF               	addlw	-1
  2174  0349  1D03               	skipz
  2175  034A  2B45               	goto	u865
  2176  034B  0874               	movf	___lwdiv@divisor+1,w
  2177  034C  0276               	subwf	___lwdiv@dividend+1,w
  2178  034D  1D03               	skipz
  2179  034E  2B51               	goto	u875
  2180  034F  0873               	movf	___lwdiv@divisor,w
  2181  0350  0275               	subwf	___lwdiv@dividend,w
  2182  0351                     u875:
  2183  0351  1C03               	skipc
  2184  0352  2B54               	goto	u871
  2185  0353  2B55               	goto	u870
  2186  0354                     u871:
  2187  0354  2B5C               	goto	l1701
  2188  0355                     u870:
  2189  0355                     l1697:
  2190  0355  0873               	movf	___lwdiv@divisor,w
  2191  0356  02F5               	subwf	___lwdiv@dividend,f
  2192  0357  0874               	movf	___lwdiv@divisor+1,w
  2193  0358  1C03               	skipc
  2194  0359  03F6               	decf	___lwdiv@dividend+1,f
  2195  035A  02F6               	subwf	___lwdiv@dividend+1,f
  2196  035B                     l1699:
  2197  035B  1421               	bsf	___lwdiv@quotient,0
  2198  035C                     l1701:
  2199  035C  3001               	movlw	1
  2200  035D                     u885:
  2201  035D  1003               	clrc
  2202  035E  0CF4               	rrf	___lwdiv@divisor+1,f
  2203  035F  0CF3               	rrf	___lwdiv@divisor,f
  2204  0360  3EFF               	addlw	-1
  2205  0361  1D03               	skipz
  2206  0362  2B5D               	goto	u885
  2207  0363                     l1703:
  2208  0363  3001               	movlw	1
  2209  0364  02A0               	subwf	___lwdiv@counter,f
  2210  0365  1D03               	btfss	3,2
  2211  0366  2B68               	goto	u891
  2212  0367  2B69               	goto	u890
  2213  0368                     u891:
  2214  0368  2B44               	goto	l1695
  2215  0369                     u890:
  2216  0369                     l1705:
  2217  0369  0822               	movf	___lwdiv@quotient+1,w
  2218  036A  00F4               	movwf	?___lwdiv+1
  2219  036B  0821               	movf	___lwdiv@quotient,w
  2220  036C  00F3               	movwf	?___lwdiv
  2221  036D                     l566:
  2222  036D  0008               	return
  2223  036E                     __end_of___lwdiv:
  2224                           
  2225                           	psect	text8
  2226  047E                     __ptext8:	
  2227 ;; *************** function ___bmul *****************
  2228 ;; Defined at:
  2229 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul8.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  multiplier      1    wreg     unsigned char 
  2232 ;;  multiplicand    1    3[COMMON] unsigned char 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  multiplier      1    6[COMMON] unsigned char 
  2235 ;;  product         1    5[COMMON] unsigned char 
  2236 ;; Return value:  Size  Location     Type
  2237 ;;                  1    wreg      unsigned char 
  2238 ;; Registers used:
  2239 ;;		wreg, status,2, status,0
  2240 ;; Tracked objects:
  2241 ;;		On entry : 0/0
  2242 ;;		On exit  : 0/0
  2243 ;;		Unchanged: 0/0
  2244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2245 ;;      Params:         1       0       0       0       0
  2246 ;;      Locals:         2       0       0       0       0
  2247 ;;      Temps:          1       0       0       0       0
  2248 ;;      Totals:         4       0       0       0       0
  2249 ;;Total ram usage:        4 bytes
  2250 ;; Hardware stack levels used:    1
  2251 ;; Hardware stack levels required when called:    1
  2252 ;; This function calls:
  2253 ;;		Nothing
  2254 ;; This function is called by:
  2255 ;;		_sprintf
  2256 ;; This function uses a non-reentrant model
  2257 ;;
  2258                           
  2259                           
  2260                           ;psect for function ___bmul
  2261  047E                     ___bmul:
  2262                           
  2263                           ;incstack = 0
  2264                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2265                           ;___bmul@multiplier stored from wreg
  2266  047E  00F6               	movwf	___bmul@multiplier
  2267  047F                     l1267:
  2268  047F  01F5               	clrf	___bmul@product
  2269  0480                     l1269:
  2270  0480  1C76               	btfss	___bmul@multiplier,0
  2271  0481  2C83               	goto	u441
  2272  0482  2C84               	goto	u440
  2273  0483                     u441:
  2274  0483  2C88               	goto	l1273
  2275  0484                     u440:
  2276  0484                     l1271:
  2277  0484  0873               	movf	___bmul@multiplicand,w
  2278  0485  00F4               	movwf	??___bmul
  2279  0486  0874               	movf	??___bmul,w
  2280  0487  07F5               	addwf	___bmul@product,f
  2281  0488                     l1273:
  2282  0488  1003               	clrc
  2283  0489  0DF3               	rlf	___bmul@multiplicand,f
  2284  048A                     l1275:
  2285  048A  1003               	clrc
  2286  048B  0CF6               	rrf	___bmul@multiplier,f
  2287  048C  0876               	movf	___bmul@multiplier,w
  2288  048D  1D03               	btfss	3,2
  2289  048E  2C90               	goto	u451
  2290  048F  2C91               	goto	u450
  2291  0490                     u451:
  2292  0490  2C80               	goto	l1269
  2293  0491                     u450:
  2294  0491                     l1277:
  2295  0491  0875               	movf	___bmul@product,w
  2296  0492                     l320:
  2297  0492  0008               	return
  2298  0493                     __end_of___bmul:
  2299                           
  2300                           	psect	text9
  2301  03DE                     __ptext9:	
  2302 ;; *************** function _lcd_write_string *****************
  2303 ;; Defined at:
  2304 ;;		line 129 in file "lib_adc.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;  a               1    wreg     PTR unsigned char 
  2307 ;;		 -> STR_3(17), 
  2308 ;; Auto vars:     Size  Location     Type
  2309 ;;  a               1    0[BANK0 ] PTR unsigned char 
  2310 ;;		 -> STR_3(17), 
  2311 ;;  i               2    1[BANK0 ] int 
  2312 ;; Return value:  Size  Location     Type
  2313 ;;                  1    wreg      void 
  2314 ;; Registers used:
  2315 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2316 ;; Tracked objects:
  2317 ;;		On entry : 0/0
  2318 ;;		On exit  : 0/0
  2319 ;;		Unchanged: 0/0
  2320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2321 ;;      Params:         0       0       0       0       0
  2322 ;;      Locals:         0       3       0       0       0
  2323 ;;      Temps:          0       0       0       0       0
  2324 ;;      Totals:         0       3       0       0       0
  2325 ;;Total ram usage:        3 bytes
  2326 ;; Hardware stack levels used:    1
  2327 ;; Hardware stack levels required when called:    3
  2328 ;; This function calls:
  2329 ;;		_lcd_write_char
  2330 ;; This function is called by:
  2331 ;;		_display
  2332 ;; This function uses a non-reentrant model
  2333 ;;
  2334                           
  2335                           
  2336                           ;psect for function _lcd_write_string
  2337  03DE                     _lcd_write_string:
  2338                           
  2339                           ;incstack = 0
  2340                           ; Regs used in _lcd_write_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2341                           ;lcd_write_string@a stored from wreg
  2342  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  2343  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  2344  03E0  00A0               	movwf	lcd_write_string@a
  2345  03E1                     l1807:
  2346                           
  2347                           ;lib_adc.c: 129: void lcd_write_string(uint8_t *a);lib_adc.c: 130: {;lib_adc.c: 131:    
      +                           for(int i=0; a[i] != '\0'; i++)
  2348  03E1  01A1               	clrf	lcd_write_string@i
  2349  03E2  01A2               	clrf	lcd_write_string@i+1
  2350  03E3  2BF9               	goto	l1813
  2351  03E4                     l1809:
  2352                           
  2353                           ;lib_adc.c: 132:     {;lib_adc.c: 133:        lcd_write_char(a[i]);
  2354  03E4  0821               	movf	lcd_write_string@i,w
  2355  03E5  0720               	addwf	lcd_write_string@a,w
  2356  03E6  0084               	movwf	4
  2357  03E7  120A  118A  23AA  120A  118A  	fcall	stringdir
  2358  03EC  120A  118A  244A  120A  118A  	fcall	_lcd_write_char
  2359  03F1                     l1811:
  2360                           
  2361                           ;lib_adc.c: 134:     }
  2362  03F1  3001               	movlw	1
  2363  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2364  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2365  03F4  07A1               	addwf	lcd_write_string@i,f
  2366  03F5  1803               	skipnc
  2367  03F6  0AA2               	incf	lcd_write_string@i+1,f
  2368  03F7  3000               	movlw	0
  2369  03F8  07A2               	addwf	lcd_write_string@i+1,f
  2370  03F9                     l1813:
  2371  03F9  0821               	movf	lcd_write_string@i,w
  2372  03FA  0720               	addwf	lcd_write_string@a,w
  2373  03FB  0084               	movwf	4
  2374  03FC  120A  118A  23AA  120A  118A  	fcall	stringdir
  2375  0401  3A00               	xorlw	0
  2376  0402  1D03               	skipz
  2377  0403  2C05               	goto	u1051
  2378  0404  2C06               	goto	u1050
  2379  0405                     u1051:
  2380  0405  2BE4               	goto	l1809
  2381  0406                     u1050:
  2382  0406                     l160:
  2383  0406  0008               	return
  2384  0407                     __end_of_lcd_write_string:
  2385                           
  2386                           	psect	text10
  2387  044A                     __ptext10:	
  2388 ;; *************** function _lcd_write_char *****************
  2389 ;; Defined at:
  2390 ;;		line 119 in file "lib_adc.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  data            1    wreg     unsigned char 
  2393 ;; Auto vars:     Size  Location     Type
  2394 ;;  data            1    6[COMMON] unsigned char 
  2395 ;; Return value:  Size  Location     Type
  2396 ;;                  1    wreg      void 
  2397 ;; Registers used:
  2398 ;;		wreg, status,2, status,0, pclath, cstack
  2399 ;; Tracked objects:
  2400 ;;		On entry : 0/0
  2401 ;;		On exit  : 0/0
  2402 ;;		Unchanged: 0/0
  2403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2404 ;;      Params:         0       0       0       0       0
  2405 ;;      Locals:         1       0       0       0       0
  2406 ;;      Temps:          2       0       0       0       0
  2407 ;;      Totals:         3       0       0       0       0
  2408 ;;Total ram usage:        3 bytes
  2409 ;; Hardware stack levels used:    1
  2410 ;; Hardware stack levels required when called:    2
  2411 ;; This function calls:
  2412 ;;		_lcd_port
  2413 ;; This function is called by:
  2414 ;;		_display
  2415 ;;		_lcd_write_string
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           
  2420                           ;psect for function _lcd_write_char
  2421  044A                     _lcd_write_char:
  2422                           
  2423                           ;incstack = 0
  2424                           ; Regs used in _lcd_write_char: [wreg+status,2+status,0+pclath+cstack]
  2425                           ;lcd_write_char@data stored from wreg
  2426  044A  00F6               	movwf	lcd_write_char@data
  2427  044B                     l1663:
  2428                           
  2429                           ;lib_adc.c: 119: void lcd_write_char(uint8_t data);lib_adc.c: 120: {;lib_adc.c: 121:    
      +                           PORTEbits.RE0 = 1;
  2430  044B  1283               	bcf	3,5	;RP0=0, select bank0
  2431  044C  1303               	bcf	3,6	;RP1=0, select bank0
  2432  044D  1409               	bsf	9,0	;volatile
  2433  044E                     l1665:
  2434                           
  2435                           ;lib_adc.c: 122:     lcd_port(data);
  2436  044E  0876               	movf	lcd_write_char@data,w
  2437  044F  120A  118A  24E5  120A  118A  	fcall	_lcd_port
  2438  0454                     l1667:
  2439                           
  2440                           ;lib_adc.c: 124:     PORTEbits.RE2 = 1;
  2441  0454  1283               	bcf	3,5	;RP0=0, select bank0
  2442  0455  1303               	bcf	3,6	;RP1=0, select bank0
  2443  0456  1509               	bsf	9,2	;volatile
  2444  0457                     l1669:
  2445                           
  2446                           ;lib_adc.c: 125:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2447  0457  3006               	movlw	6
  2448  0458  00F5               	movwf	??_lcd_write_char+1
  2449  0459  3030               	movlw	48
  2450  045A  00F4               	movwf	??_lcd_write_char
  2451  045B                     u1137:
  2452  045B  0BF4               	decfsz	??_lcd_write_char,f
  2453  045C  2C5B               	goto	u1137
  2454  045D  0BF5               	decfsz	??_lcd_write_char+1,f
  2455  045E  2C5B               	goto	u1137
  2456  045F  0000               	nop
  2457  0460                     l1671:
  2458                           
  2459                           ;lib_adc.c: 126:     PORTEbits.RE2 = 0;
  2460  0460  1283               	bcf	3,5	;RP0=0, select bank0
  2461  0461  1303               	bcf	3,6	;RP1=0, select bank0
  2462  0462  1109               	bcf	9,2	;volatile
  2463  0463                     l154:
  2464  0463  0008               	return
  2465  0464                     __end_of_lcd_write_char:
  2466                           
  2467                           	psect	text11
  2468  042D                     __ptext11:	
  2469 ;; *************** function _lcd_move_cursor *****************
  2470 ;; Defined at:
  2471 ;;		line 107 in file "lib_adc.c"
  2472 ;; Parameters:    Size  Location     Type
  2473 ;;  row             1    wreg     unsigned char 
  2474 ;;  col             1    7[COMMON] unsigned char 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  row             1    0[BANK0 ] unsigned char 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      void 
  2479 ;; Registers used:
  2480 ;;		wreg, status,2, status,0, pclath, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2486 ;;      Params:         1       0       0       0       0
  2487 ;;      Locals:         0       1       0       0       0
  2488 ;;      Temps:          0       0       0       0       0
  2489 ;;      Totals:         1       1       0       0       0
  2490 ;;Total ram usage:        2 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    3
  2493 ;; This function calls:
  2494 ;;		_lcd_cmd
  2495 ;; This function is called by:
  2496 ;;		_display
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           
  2501                           ;psect for function _lcd_move_cursor
  2502  042D                     _lcd_move_cursor:
  2503                           
  2504                           ;incstack = 0
  2505                           ; Regs used in _lcd_move_cursor: [wreg+status,2+status,0+pclath+cstack]
  2506                           ;lcd_move_cursor@row stored from wreg
  2507  042D  1283               	bcf	3,5	;RP0=0, select bank0
  2508  042E  1303               	bcf	3,6	;RP1=0, select bank0
  2509  042F  00A0               	movwf	lcd_move_cursor@row
  2510  0430                     l1799:
  2511                           
  2512                           ;lib_adc.c: 107: void lcd_move_cursor(uint8_t row, uint8_t col);lib_adc.c: 108: {;lib_ad
      +                          c.c: 109:     if(row == 0)
  2513  0430  0820               	movf	lcd_move_cursor@row,w
  2514  0431  1D03               	btfss	3,2
  2515  0432  2C34               	goto	u1031
  2516  0433  2C35               	goto	u1030
  2517  0434                     u1031:
  2518  0434  2C3D               	goto	l1803
  2519  0435                     u1030:
  2520  0435                     l1801:
  2521                           
  2522                           ;lib_adc.c: 110:     {;lib_adc.c: 111:         lcd_cmd(0x80 + col);
  2523  0435  0877               	movf	lcd_move_cursor@col,w
  2524  0436  3E80               	addlw	128
  2525  0437  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  2526                           
  2527                           ;lib_adc.c: 112:     }
  2528  043C  2C49               	goto	l151
  2529  043D                     l1803:
  2530  043D  0320               	decf	lcd_move_cursor@row,w
  2531  043E  1D03               	btfss	3,2
  2532  043F  2C41               	goto	u1041
  2533  0440  2C42               	goto	u1040
  2534  0441                     u1041:
  2535  0441  2C49               	goto	l151
  2536  0442                     u1040:
  2537  0442                     l1805:
  2538                           
  2539                           ;lib_adc.c: 114:     {;lib_adc.c: 115:         lcd_cmd(0xC0 + col);
  2540  0442  0877               	movf	lcd_move_cursor@col,w
  2541  0443  3EC0               	addlw	192
  2542  0444  120A  118A  2464  120A  118A  	fcall	_lcd_cmd
  2543  0449                     l151:
  2544  0449  0008               	return
  2545  044A                     __end_of_lcd_move_cursor:
  2546                           
  2547                           	psect	text12
  2548  0464                     __ptext12:	
  2549 ;; *************** function _lcd_cmd *****************
  2550 ;; Defined at:
  2551 ;;		line 90 in file "lib_adc.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;  cmd             1    wreg     unsigned char 
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;  cmd             1    6[COMMON] unsigned char 
  2556 ;; Return value:  Size  Location     Type
  2557 ;;                  1    wreg      void 
  2558 ;; Registers used:
  2559 ;;		wreg, status,2, status,0, pclath, cstack
  2560 ;; Tracked objects:
  2561 ;;		On entry : 0/0
  2562 ;;		On exit  : 0/0
  2563 ;;		Unchanged: 0/0
  2564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2565 ;;      Params:         0       0       0       0       0
  2566 ;;      Locals:         1       0       0       0       0
  2567 ;;      Temps:          2       0       0       0       0
  2568 ;;      Totals:         3       0       0       0       0
  2569 ;;Total ram usage:        3 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    2
  2572 ;; This function calls:
  2573 ;;		_lcd_port
  2574 ;; This function is called by:
  2575 ;;		_lcd_init
  2576 ;;		_lcd_move_cursor
  2577 ;;		_setup
  2578 ;;		_lcd_clear
  2579 ;;		_lcd_shift_right
  2580 ;;		_lcd_shift_left
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583                           
  2584                           
  2585                           ;psect for function _lcd_cmd
  2586  0464                     _lcd_cmd:
  2587                           
  2588                           ;incstack = 0
  2589                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  2590                           ;lcd_cmd@cmd stored from wreg
  2591  0464  00F6               	movwf	lcd_cmd@cmd
  2592  0465                     l1673:
  2593                           
  2594                           ;lib_adc.c: 90: void lcd_cmd(uint8_t cmd);lib_adc.c: 91: {;lib_adc.c: 92:     PORTEbits.
      +                          RE0 = 0;
  2595  0465  1283               	bcf	3,5	;RP0=0, select bank0
  2596  0466  1303               	bcf	3,6	;RP1=0, select bank0
  2597  0467  1009               	bcf	9,0	;volatile
  2598  0468                     l1675:
  2599                           
  2600                           ;lib_adc.c: 93:     lcd_port(cmd);
  2601  0468  0876               	movf	lcd_cmd@cmd,w
  2602  0469  120A  118A  24E5  120A  118A  	fcall	_lcd_port
  2603  046E                     l1677:
  2604                           
  2605                           ;lib_adc.c: 95:     PORTEbits.RE2 = 1;
  2606  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2607  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2608  0470  1509               	bsf	9,2	;volatile
  2609  0471                     l1679:
  2610                           
  2611                           ;lib_adc.c: 96:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2612  0471  3006               	movlw	6
  2613  0472  00F5               	movwf	??_lcd_cmd+1
  2614  0473  3030               	movlw	48
  2615  0474  00F4               	movwf	??_lcd_cmd
  2616  0475                     u1147:
  2617  0475  0BF4               	decfsz	??_lcd_cmd,f
  2618  0476  2C75               	goto	u1147
  2619  0477  0BF5               	decfsz	??_lcd_cmd+1,f
  2620  0478  2C75               	goto	u1147
  2621  0479  0000               	nop
  2622  047A                     l1681:
  2623                           
  2624                           ;lib_adc.c: 97:     PORTEbits.RE2 = 0;
  2625  047A  1283               	bcf	3,5	;RP0=0, select bank0
  2626  047B  1303               	bcf	3,6	;RP1=0, select bank0
  2627  047C  1109               	bcf	9,2	;volatile
  2628  047D                     l142:
  2629  047D  0008               	return
  2630  047E                     __end_of_lcd_cmd:
  2631                           
  2632                           	psect	text13
  2633  04E5                     __ptext13:	
  2634 ;; *************** function _lcd_port *****************
  2635 ;; Defined at:
  2636 ;;		line 41 in file "lib_adc.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  a               1    wreg     unsigned char 
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;  a               1    3[COMMON] unsigned char 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2650 ;;      Params:         0       0       0       0       0
  2651 ;;      Locals:         1       0       0       0       0
  2652 ;;      Temps:          0       0       0       0       0
  2653 ;;      Totals:         1       0       0       0       0
  2654 ;;Total ram usage:        1 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; Hardware stack levels required when called:    1
  2657 ;; This function calls:
  2658 ;;		Nothing
  2659 ;; This function is called by:
  2660 ;;		_lcd_init
  2661 ;;		_lcd_cmd
  2662 ;;		_lcd_write_char
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           
  2667                           ;psect for function _lcd_port
  2668  04E5                     _lcd_port:
  2669                           
  2670                           ;incstack = 0
  2671                           ; Regs used in _lcd_port: [wreg]
  2672                           ;lcd_port@a stored from wreg
  2673  04E5  00F3               	movwf	lcd_port@a
  2674  04E6                     l1661:
  2675                           
  2676                           ;lib_adc.c: 41: void lcd_port(uint8_t a);lib_adc.c: 42: {;lib_adc.c: 44:     PORTD = a;
  2677  04E6  0873               	movf	lcd_port@a,w
  2678  04E7  1283               	bcf	3,5	;RP0=0, select bank0
  2679  04E8  1303               	bcf	3,6	;RP1=0, select bank0
  2680  04E9  0088               	movwf	8	;volatile
  2681  04EA                     l139:
  2682  04EA  0008               	return
  2683  04EB                     __end_of_lcd_port:
  2684                           
  2685                           	psect	text14
  2686  0493                     __ptext14:	
  2687 ;; *************** function _ADC_2 *****************
  2688 ;; Defined at:
  2689 ;;		line 114 in file "rutina_adc.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;		None
  2694 ;; Return value:  Size  Location     Type
  2695 ;;                  1    wreg      void 
  2696 ;; Registers used:
  2697 ;;		wreg, status,2, status,0, pclath, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : 0/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2703 ;;      Params:         0       0       0       0       0
  2704 ;;      Locals:         0       0       0       0       0
  2705 ;;      Temps:          1       0       0       0       0
  2706 ;;      Totals:         1       0       0       0       0
  2707 ;;Total ram usage:        1 bytes
  2708 ;; Hardware stack levels used:    1
  2709 ;; Hardware stack levels required when called:    2
  2710 ;; This function calls:
  2711 ;;		_canal_10
  2712 ;; This function is called by:
  2713 ;;		_main
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717                           
  2718                           ;psect for function _ADC_2
  2719  0493                     _ADC_2:
  2720  0493                     l1543:	
  2721                           ;incstack = 0
  2722                           ; Regs used in _ADC_2: [wreg+status,2+status,0+pclath+cstack]
  2723                           
  2724                           
  2725                           ;rutina_adc.c: 115:     adc_data2 = ADRESH;
  2726  0493  1283               	bcf	3,5	;RP0=0, select bank0
  2727  0494  1303               	bcf	3,6	;RP1=0, select bank0
  2728  0495  081E               	movf	30,w	;volatile
  2729  0496  00F3               	movwf	??_ADC_2
  2730  0497  0873               	movf	??_ADC_2,w
  2731  0498  00C3               	movwf	_adc_data2
  2732  0499                     l1545:
  2733                           
  2734                           ;rutina_adc.c: 116:     ban_an1 = 0;
  2735  0499  01BF               	clrf	_ban_an1
  2736  049A  01C0               	clrf	_ban_an1+1
  2737  049B                     l1547:
  2738                           
  2739                           ;rutina_adc.c: 117:     ban_an2 = 1;
  2740  049B  3001               	movlw	1
  2741  049C  00BD               	movwf	_ban_an2
  2742  049D  3000               	movlw	0
  2743  049E  00BE               	movwf	_ban_an2+1
  2744  049F                     l1549:
  2745                           
  2746                           ;rutina_adc.c: 118:     canal_10();
  2747  049F  120A  118A  24D7  120A  118A  	fcall	_canal_10
  2748  04A4                     l1551:
  2749                           
  2750                           ;rutina_adc.c: 119:     ADCON0bits.GO_DONE =1;
  2751  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  2752  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  2753  04A6  149F               	bsf	31,1	;volatile
  2754  04A7                     l69:
  2755  04A7  0008               	return
  2756  04A8                     __end_of_ADC_2:
  2757                           
  2758                           	psect	text15
  2759  04D7                     __ptext15:	
  2760 ;; *************** function _canal_10 *****************
  2761 ;; Defined at:
  2762 ;;		line 91 in file "rutina_adc.c"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		None
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2776 ;;      Params:         0       0       0       0       0
  2777 ;;      Locals:         0       0       0       0       0
  2778 ;;      Temps:          0       0       0       0       0
  2779 ;;      Totals:         0       0       0       0       0
  2780 ;;Total ram usage:        0 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    1
  2783 ;; This function calls:
  2784 ;;		Nothing
  2785 ;; This function is called by:
  2786 ;;		_ADC_2
  2787 ;;		_setup
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           
  2792                           ;psect for function _canal_10
  2793  04D7                     _canal_10:
  2794  04D7                     l1435:	
  2795                           ;incstack = 0
  2796                           ; Regs used in _canal_10: []
  2797                           
  2798                           
  2799                           ;rutina_adc.c: 94:     ADCON0bits.CHS3 = 1;
  2800  04D7  1283               	bcf	3,5	;RP0=0, select bank0
  2801  04D8  1303               	bcf	3,6	;RP1=0, select bank0
  2802  04D9  169F               	bsf	31,5	;volatile
  2803                           
  2804                           ;rutina_adc.c: 95:     ADCON0bits.CHS2 = 1;
  2805  04DA  161F               	bsf	31,4	;volatile
  2806                           
  2807                           ;rutina_adc.c: 96:     ADCON0bits.CHS1 = 0;
  2808  04DB  119F               	bcf	31,3	;volatile
  2809                           
  2810                           ;rutina_adc.c: 97:     ADCON0bits.CHS0 = 0;
  2811  04DC  111F               	bcf	31,2	;volatile
  2812  04DD                     l60:
  2813  04DD  0008               	return
  2814  04DE                     __end_of_canal_10:
  2815                           
  2816                           	psect	text16
  2817  04A8                     __ptext16:	
  2818 ;; *************** function _ADC_1 *****************
  2819 ;; Defined at:
  2820 ;;		line 107 in file "rutina_adc.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;		None
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;		None
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2834 ;;      Params:         0       0       0       0       0
  2835 ;;      Locals:         0       0       0       0       0
  2836 ;;      Temps:          1       0       0       0       0
  2837 ;;      Totals:         1       0       0       0       0
  2838 ;;Total ram usage:        1 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    2
  2841 ;; This function calls:
  2842 ;;		_canal_12
  2843 ;; This function is called by:
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _ADC_1
  2850  04A8                     _ADC_1:
  2851  04A8                     l1535:	
  2852                           ;incstack = 0
  2853                           ; Regs used in _ADC_1: [wreg+status,2+status,0+pclath+cstack]
  2854                           
  2855                           
  2856                           ;rutina_adc.c: 108:     adc_data1 = ADRESH;
  2857  04A8  1283               	bcf	3,5	;RP0=0, select bank0
  2858  04A9  1303               	bcf	3,6	;RP1=0, select bank0
  2859  04AA  081E               	movf	30,w	;volatile
  2860  04AB  00F3               	movwf	??_ADC_1
  2861  04AC  0873               	movf	??_ADC_1,w
  2862  04AD  00C4               	movwf	_adc_data1
  2863                           
  2864                           ;rutina_adc.c: 109:     ban_an1 = 1;
  2865  04AE  3001               	movlw	1
  2866  04AF  00BF               	movwf	_ban_an1
  2867  04B0  3000               	movlw	0
  2868  04B1  00C0               	movwf	_ban_an1+1
  2869  04B2                     l1537:
  2870                           
  2871                           ;rutina_adc.c: 110:     ban_an2 = 0;
  2872  04B2  01BD               	clrf	_ban_an2
  2873  04B3  01BE               	clrf	_ban_an2+1
  2874  04B4                     l1539:
  2875                           
  2876                           ;rutina_adc.c: 111:     canal_12();
  2877  04B4  120A  118A  24DE  120A  118A  	fcall	_canal_12
  2878  04B9                     l1541:
  2879                           
  2880                           ;rutina_adc.c: 112:     ADCON0bits.GO_DONE =1;
  2881  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  2882  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  2883  04BB  149F               	bsf	31,1	;volatile
  2884  04BC                     l66:
  2885  04BC  0008               	return
  2886  04BD                     __end_of_ADC_1:
  2887                           
  2888                           	psect	text17
  2889  04DE                     __ptext17:	
  2890 ;; *************** function _canal_12 *****************
  2891 ;; Defined at:
  2892 ;;		line 99 in file "rutina_adc.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;		None
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		None
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2906 ;;      Params:         0       0       0       0       0
  2907 ;;      Locals:         0       0       0       0       0
  2908 ;;      Temps:          0       0       0       0       0
  2909 ;;      Totals:         0       0       0       0       0
  2910 ;;Total ram usage:        0 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; Hardware stack levels required when called:    1
  2913 ;; This function calls:
  2914 ;;		Nothing
  2915 ;; This function is called by:
  2916 ;;		_ADC_1
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           
  2921                           ;psect for function _canal_12
  2922  04DE                     _canal_12:
  2923  04DE                     l1437:	
  2924                           ;incstack = 0
  2925                           ; Regs used in _canal_12: []
  2926                           
  2927                           
  2928                           ;rutina_adc.c: 102:     ADCON0bits.CHS3 = 1;
  2929  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  2930  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  2931  04E0  169F               	bsf	31,5	;volatile
  2932                           
  2933                           ;rutina_adc.c: 103:     ADCON0bits.CHS2 = 0;
  2934  04E1  121F               	bcf	31,4	;volatile
  2935                           
  2936                           ;rutina_adc.c: 104:     ADCON0bits.CHS1 = 1;
  2937  04E2  159F               	bsf	31,3	;volatile
  2938                           
  2939                           ;rutina_adc.c: 105:     ADCON0bits.CHS0 = 0;
  2940  04E3  111F               	bcf	31,2	;volatile
  2941  04E4                     l63:
  2942  04E4  0008               	return
  2943  04E5                     __end_of_canal_12:
  2944                           
  2945                           	psect	text18
  2946  0407                     __ptext18:	
  2947 ;; *************** function _isr *****************
  2948 ;; Defined at:
  2949 ;;		line 126 in file "rutina_adc.c"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;		None
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2963 ;;      Params:         0       0       0       0       0
  2964 ;;      Locals:         0       0       0       0       0
  2965 ;;      Temps:          3       0       0       0       0
  2966 ;;      Totals:         3       0       0       0       0
  2967 ;;Total ram usage:        3 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		Interrupt level 1
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _isr
  2978  0407                     _isr:
  2979  0407                     i1l1613:
  2980                           
  2981                           ;rutina_adc.c: 128:     if (PIR1bits.ADIF)
  2982  0407  1283               	bcf	3,5	;RP0=0, select bank0
  2983  0408  1303               	bcf	3,6	;RP1=0, select bank0
  2984  0409  1F0C               	btfss	12,6	;volatile
  2985  040A  2C0C               	goto	u79_21
  2986  040B  2C0D               	goto	u79_20
  2987  040C                     u79_21:
  2988  040C  2C26               	goto	i1l77
  2989  040D                     u79_20:
  2990  040D                     i1l1615:
  2991                           
  2992                           ;rutina_adc.c: 129:     {;rutina_adc.c: 130:         PIR1bits.ADIF = 0;
  2993  040D  130C               	bcf	12,6	;volatile
  2994  040E                     i1l1617:
  2995                           
  2996                           ;rutina_adc.c: 132:         if (adc_flag)
  2997  040E  0878               	movf	_adc_flag,w
  2998  040F  1903               	btfsc	3,2
  2999  0410  2C12               	goto	u80_21
  3000  0411  2C13               	goto	u80_20
  3001  0412                     u80_21:
  3002  0412  2C18               	goto	i1l1621
  3003  0413                     u80_20:
  3004  0413                     i1l1619:
  3005                           
  3006                           ;rutina_adc.c: 133:         {;rutina_adc.c: 134:             adc_data1 = ADRESH;
  3007  0413  081E               	movf	30,w	;volatile
  3008  0414  00F0               	movwf	??_isr
  3009  0415  0870               	movf	??_isr,w
  3010  0416  00C4               	movwf	_adc_data1
  3011                           
  3012                           ;rutina_adc.c: 135:         }
  3013  0417  2C1C               	goto	i1l1623
  3014  0418                     i1l1621:
  3015                           
  3016                           ;rutina_adc.c: 137:         {;rutina_adc.c: 138:             adc_data2 = ADRESH;
  3017  0418  081E               	movf	30,w	;volatile
  3018  0419  00F0               	movwf	??_isr
  3019  041A  0870               	movf	??_isr,w
  3020  041B  00C3               	movwf	_adc_data2
  3021  041C                     i1l1623:
  3022                           
  3023                           ;rutina_adc.c: 141:         adc_flag = !adc_flag;
  3024  041C  0878               	movf	_adc_flag,w
  3025  041D  1903               	btfsc	3,2
  3026  041E  2C20               	goto	u81_21
  3027  041F  2C22               	goto	u81_20
  3028  0420                     u81_21:
  3029  0420  3001               	movlw	1
  3030  0421  2C23               	goto	u82_20
  3031  0422                     u81_20:
  3032  0422  3000               	movlw	0
  3033  0423                     u82_20:
  3034  0423  00F0               	movwf	??_isr
  3035  0424  0870               	movf	??_isr,w
  3036  0425  00F8               	movwf	_adc_flag
  3037  0426                     i1l77:
  3038  0426  0872               	movf	??_isr+2,w
  3039  0427  008A               	movwf	10
  3040  0428  0E71               	swapf	??_isr+1,w
  3041  0429  0083               	movwf	3
  3042  042A  0EFE               	swapf	btemp,f
  3043  042B  0E7E               	swapf	btemp,w
  3044  042C  0009               	retfie
  3045  042D                     __end_of_isr:
  3046  007E                     btemp	set	126	;btemp
  3047  007E                     wtemp0	set	126
  3048                           
  3049                           	psect	intentry
  3050  0004                     __pintentry:	
  3051                           ;incstack = 0
  3052                           ; Regs used in _isr: [wreg+status,2+status,0]
  3053                           
  3054  0004                     interrupt_function:
  3055  007E                     saved_w	set	btemp
  3056  0004  00FE               	movwf	btemp
  3057  0005  0E03               	swapf	3,w
  3058  0006  00F1               	movwf	??_isr+1
  3059  0007  080A               	movf	10,w
  3060  0008  00F2               	movwf	??_isr+2
  3061  0009  120A  118A  2C07   	ljmp	_isr
  3062                           
  3063                           	psect	config
  3064                           
  3065                           ;Config register CONFIG1 @ 0x2007
  3066                           ;	Oscillator Selection bits
  3067                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  3068                           ;	Watchdog Timer Enable bit
  3069                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3070                           ;	Power-up Timer Enable bit
  3071                           ;	PWRTE = OFF, PWRT disabled
  3072                           ;	RE3/MCLR pin function select bit
  3073                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3074                           ;	Code Protection bit
  3075                           ;	CP = OFF, Program memory code protection is disabled
  3076                           ;	Data Code Protection bit
  3077                           ;	CPD = OFF, Data memory code protection is disabled
  3078                           ;	Brown Out Reset Selection bits
  3079                           ;	BOREN = OFF, BOR disabled
  3080                           ;	Internal External Switchover bit
  3081                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3082                           ;	Fail-Safe Clock Monitor Enabled bit
  3083                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3084                           ;	Low Voltage Programming Enable bit
  3085                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3086                           ;	In-Circuit Debugger Mode bit
  3087                           ;	DEBUG = 0x1, unprogrammed default
  3088  2007                     	org	8199
  3089  2007  20D4               	dw	8404
  3090                           
  3091                           ;Config register CONFIG2 @ 0x2008
  3092                           ;	Brown-out Reset Selection bit
  3093                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3094                           ;	Flash Program Memory Self Write Enable bits
  3095                           ;	WRT = OFF, Write protection off
  3096  2008                     	org	8200
  3097  2008  3FFF               	dw	16383

Data Sizes:
    Strings     36
    Constant    10
    Data        0
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     29      48
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 7
		 -> STR_4(CODE[5]), STR_2(CODE[7]), STR_1(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 6
		 -> display@str(BANK0[3]), str_pot_b(BANK0[5]), str_pot_a(BANK0[6]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    lcd_write_string@a	PTR unsigned char  size(1) Largest target is 17
		 -> STR_3(CODE[17]), 

    display@str	PTR unsigned char [3] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    str_pot_b	PTR unsigned char [5] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    str_pot_a	PTR unsigned char [6] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 


Critical Paths under _main in COMMON

    _setup->_lcd_cmd
    _lcd_init->_lcd_cmd
    _display->_lcd_move_cursor
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _lcd_write_string->_lcd_write_char
    _lcd_write_char->_lcd_port
    _lcd_move_cursor->_lcd_cmd
    _lcd_cmd->_lcd_port

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_display
    _setup->_lcd_init
    _display->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    5813
                                             26 BANK0      3     3      0
                              _ADC_1
                              _ADC_2
                            _display
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     155
                           _canal_10
                            _lcd_cmd
                           _lcd_init
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             2     2      0      93
                                              0 BANK0      2     2      0
                            _lcd_cmd
                           _lcd_port
 ---------------------------------------------------------------------------------
 (1) _display                                              4     4      0    3251
                                             22 BANK0      4     4      0
                    _lcd_move_cursor
                     _lcd_write_char
                   _lcd_write_string
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    2407
                                              9 BANK0     13    10      3
                             ___bmul
                            ___lwdiv
                            ___lwmod
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      68
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     168
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _lcd_write_string                                     3     3      0     228
                                              0 BANK0      3     3      0
                     _lcd_write_char
 ---------------------------------------------------------------------------------
 (3) _lcd_write_char                                       3     3      0      62
                                              4 COMMON     3     3      0
                           _lcd_port
 ---------------------------------------------------------------------------------
 (2) _lcd_move_cursor                                      2     1      1     366
                                              7 COMMON     1     0      1
                                              0 BANK0      1     1      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (3) _lcd_cmd                                              3     3      0      62
                                              4 COMMON     3     3      0
                           _lcd_port
 ---------------------------------------------------------------------------------
 (3) _lcd_port                                             1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_2                                                1     1      0       0
                                              3 COMMON     1     1      0
                           _canal_10
 ---------------------------------------------------------------------------------
 (2) _canal_10                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_1                                                1     1      0       0
                                              3 COMMON     1     1      0
                           _canal_12
 ---------------------------------------------------------------------------------
 (2) _canal_12                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_1
     _canal_12
   _ADC_2
     _canal_10
   _display
     _lcd_move_cursor
       _lcd_cmd
         _lcd_port
     _lcd_write_char
       _lcd_port
     _lcd_write_string
       _lcd_write_char
         _lcd_port
     _sprintf
       ___bmul
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _isdigit
   _setup
     _canal_10
     _lcd_cmd
       _lcd_port
     _lcd_init
       _lcd_cmd
         _lcd_port
       _lcd_port
   _sprintf
     ___bmul
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _isdigit

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      3B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      30       5       60.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      3B      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Tue Feb 23 13:13:50 2021

                        pc 0002             ___bmul@product 0075                         l60 04DD  
                       l63 04E4                         l57 021F                         l66 04BC  
                       l69 04A7                         fsr 0004                        l142 047D  
                      l151 0449                        l160 0406                        l320 0492  
                      l136 0327                        l154 0463                        l139 04EA  
                      l169 0278                        l290 0183                        l566 036D  
                      l576 03A9                        l747 04CE                        u420 04C5  
                      u421 04C4                        u430 04CB                        u431 04CA  
                      u440 0484                        u441 0483                        u450 0491  
                      u530 0376                        u451 0490                        u531 0375  
                      u550 0388                        u551 0387                        u560 0392  
                      u561 0391                        u545 037A                        u580 03A5  
                      u900 002D                        u581 03A4                        u565 038E  
                      u901 002C                        u830 0332                        u910 0046  
                      u831 0331                        u575 0399                        u911 0045  
                      u920 007C                        u921 007B                        u850 0344  
                      u930 00AD                        u851 0343                        u931 00AC  
                      u940 00BB                        u845 0336                        u941 00BA  
                      u870 0355                        u950 00C1                        u871 0354  
                      u951 00C0                        u960 00E2                        u865 0345  
                      u961 00E1                        u890 0369                        u970 00ED  
                      u891 0368                        u875 0351                        u971 00EC  
                      u980 00FD                        u885 035D                        u981 00FC  
                      u965 00DE                        u990 0112                        u991 0111  
                      u985 00F9                        u995 010E                        _isr 0407  
                      fsr0 0004                        indf 0000                       l1311 0379  
                     l2007 0092                       l1321 0398                       l1313 0380  
                     l1323 039F                       l1315 0384                       l1307 036E  
                     l1317 0388                       l1309 0376                       l1325 03A5  
                     l1261 04CB                       l1271 0484                       l1319 0392  
                     l1263 04CD                       l1255 04BE                       l1273 0488  
                     l1257 04BF                       l1435 04D7                       l1275 048A  
                     l1267 047F                       l1259 04C5                       l1437 04DE  
                     l1541 04B9                       l1277 0491                       l1269 0480  
                     l1701 035C                       l1535 04A8                       l1551 04A4  
                     l1543 0493                       l1703 0363                       l1711 0027  
                     l1537 04B2                       l1545 0499                       l1801 0435  
                     l1705 0369                       l1721 0046                       l1713 002D  
                     l1539 04B4                       l1547 049B                       l1803 043D  
                     l1811 03F1                       l1731 006C                       l1723 004A  
                     l1715 0034                       l1549 049F                       l1661 04E6  
                     l1805 0442                       l1813 03F9                       l1741 00A5  
                     l1725 004C                       l1733 007D                       l1717 0039  
                     l1709 0022                       l1821 02F3                       l1901 0267  
                     l1671 0460                       l1663 044B                       l1807 03E1  
                     l1751 00BB                       l1743 00A9                       l1727 005D  
                     l1719 003A                       l1911 0184                       l1823 02F9  
                     l1815 02D1                       l1903 026A                       l1831 022A  
                     l1681 047A                       l1673 0465                       l1665 044E  
                     l1809 03E4                       l1753 00C1                       l1745 00AD  
                     l1737 007E                       l1729 0068                       l1921 01AF  
                     l1913 018B                       l1817 02D7                       l1905 026B  
                     l1841 0232                       l1833 022C                       l1825 0220  
                     l1675 0468                       l1667 0454                       l1691 033C  
                     l1683 0328                       l1771 0112                       l1763 00E3  
                     l1755 00C5                       l1747 00B1                       l1739 009D  
                     l1931 01D3                       l1923 01B5                       l1915 0191  
                     l1819 02E2                       l1907 0273                       l1851 0239  
                     l1843 0233                       l1835 022D                       l1827 0224  
                     l1677 046E                       l1669 0457                       l1693 0340  
                     l1685 032C                       l1781 015C                       l1773 0118  
                     l1765 00ED                       l1749 00B6                       l1941 01F9  
                     l1933 01DB                       l1925 01BD                       l1917 0198  
                     l1861 023F                       l1853 023A                       l1845 0234  
                     l1837 022E                       l1829 0225                       l1679 0471  
                     l1695 0344                       l1687 0332                       l1775 0120  
                     l1767 00FD                       l1759 00C7                       l1943 01FF  
                     l1935 01E1                       l1927 01C5                       l1919 01A7  
                     l1871 0247                       l1863 0240                       l1855 023B  
                     l1847 0235                       l1839 0231                       l1951 0279  
                     l1697 0355                       l1689 0335                       l1777 0127  
                     l1785 0164                       l1769 00FE                       l1945 0207  
                     l1937 01E9                       l1929 01CD                       l1881 0257  
                     l1873 0248                       l1865 0241                       l1857 023C  
                     l1849 0238                       l1961 0295                       l1953 027E  
                     l1699 035B                       l1779 012C                       l1787 016D  
                     l1947 020F                       l1939 01F1                       l1891 0260  
                     l1883 025A                       l1875 024D                       l1867 0242  
                     l1859 023E                       l1963 029B                       l1955 0284  
                     l1789 017F                       l1949 0217                       l1893 0261  
                     l1885 025B                       l1877 0253                       l1869 0243  
                     l1965 02A0                       l1957 028A                       l1799 0430  
                     l1895 0262                       l1887 025C                       l1879 0256  
                     l1967 02B4                       l1959 028F                       l1897 0265  
                     l1889 025D                       l1969 02C8                       l1899 0266  
                     ?_isr 0070                       STR_1 03CB                       STR_2 03D2  
                     STR_3 03BA                       STR_4 03D9                       u1000 0120  
                     u1001 011F                       u1010 016D                       u1011 016C  
                     u1020 017F                       u1021 017E                       u1030 0435  
                     u1031 0434                       u1040 0442                       u1041 0441  
                     u1050 0406                       u1051 0405                       u1107 02DD  
                     u1060 0284                       u1117 02EE                       u1061 0283  
                     u1070 028A                       u1127 02FF                       u1071 0289  
                     u1080 0295                       u1137 045B                       u1081 0294  
                     u1090 029B                       u1147 0475                       u1091 029A  
                     _IOCB 0096                       i1l77 0426                       _TMR0 0001  
   __end_of_lcd_write_char 0464                       _main 0279                       btemp 007E  
                     start 000C          ___bmul@multiplier 0076           ?_lcd_move_cursor 0077  
                    ??_isr 0070                      ?_main 0070                      _ADC_1 04A8  
                    _ADC_2 0493                      _ANSEL 0188            __end_of___lwdiv 036E  
          __end_of___lwmod 03AA                      _PORTA 0005                      _PORTB 0006  
                    _PORTC 0007                      _PORTD 0008                      _PORTE 0009  
                    u80_20 0413                      u80_21 0412                      u81_20 0422  
                    u81_21 0420                      _TRISA 0085                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088                      _TRISE 0089  
                    u82_20 0423                      u79_20 040D                      u79_21 040C  
          __end_of_lcd_cmd 047E            __end_of_display 0220            __end_of_dpowers 03BA  
          __end_of_isdigit 04CF                      _setup 0220                      pclath 000A  
          ?_lcd_write_char 0070                      status 0003                      wtemp0 007E  
          __end_of_sprintf 0184            __initialization 000F               __end_of_main 02D1  
                   ??_main 003A                     ?_ADC_1 0070                     ?_ADC_2 0070  
                   _ADRESH 001E                     ?_setup 0070                     _ANSELH 0189  
                   i1l1621 0418                     i1l1613 0407                     i1l1623 041C  
                   i1l1615 040D                     i1l1617 040E                     i1l1619 0413  
         __end_of_canal_10 04DE           __end_of_canal_12 04E5                     _OSCCON 008F  
         __end_of_lcd_init 0328           __end_of_lcd_port 04EB                     ___bmul 047E  
                ??___lwdiv 0077                  ??___lwmod 0027   __end_of_lcd_write_string 0407  
                ??_lcd_cmd 0074                  ??_display 0036                  ??_isdigit 0073  
                   saved_w 007E                  ??_sprintf 002C          lcd_write_string@a 0020  
        lcd_write_string@i 0021    __end_of__initialization 001B              __end_of_ADC_1 04BD  
            __end_of_ADC_2 04A8        ___bmul@multiplicand 0073             __pcstackCOMMON 0070  
            __end_of_setup 0279                    ??_ADC_1 0073                    ??_ADC_2 0073  
           _OPTION_REGbits 0081                    ??_setup 0077                 __pbssBANK0 003D  
               __pmaintext 0279                    ?___bmul 0073                 __pintentry 0004  
                ?_canal_10 0070                  ?_canal_12 0070           ??_lcd_write_char 0074  
                ?_lcd_init 0070                  ?_lcd_port 0070                 __stringtab 03AA  
       lcd_write_char@data 0076            __size_of___bmul 0015                    ___lwdiv 0328  
                  _ban_an1 003F                    _ban_an2 003D                    ___lwmod 036E  
                  __ptext1 0220                    __ptext2 02D1                    __ptext3 0184  
                  __ptext4 001F                    __ptext5 04BD                    __ptext6 036E  
                  __ptext7 0328                    __ptext8 047E                    __ptext9 03DE  
                  _lcd_cmd 0464   __size_of_lcd_move_cursor 001D                    _display 0184  
               ??_canal_10 0073                 ??_canal_12 0073                    _dpowers 03B0  
                  _isdigit 04BD               __size_of_isr 0026                    _sprintf 001F  
                  clrloop0 04D0                 ??_lcd_init 0020                    _str_pos 0079  
               ??_lcd_port 0073       end_of_initialization 001B          ?_lcd_write_string 0070  
                _PORTEbits 0009         ??_lcd_write_string 0077                 lcd_cmd@cmd 0076  
               display@str 0037             __end_of___bmul 0493        start_initialization 000F  
              __end_of_isr 042D          ??_lcd_move_cursor 0078                   ??___bmul 0074  
              __pbssCOMMON 0078                  ___latbits 0002              __pcstackBANK0 0020  
        __size_of_canal_10 0007          __size_of_canal_12 0007                  _adc_data1 0044  
                _adc_data2 0043          __size_of_lcd_init 0057                sprintf@flag 0030  
        __size_of_lcd_port 0006                sprintf@prec 0034           ___lwdiv@dividend 0075  
                 ?___lwdiv 0073                   ?___lwmod 0023                  __pstrings 03AA  
                 ?_lcd_cmd 0070             __size_of_ADC_1 0015             __size_of_ADC_2 0015  
                 ?_display 0070                   ?_isdigit 0070         lcd_move_cursor@col 0077  
       lcd_move_cursor@row 0020           ___lwdiv@quotient 0021                   ?_sprintf 0029  
           __size_of_setup 0059          interrupt_function 0004                  clear_ram0 04CF  
                 _PIE1bits 008C                   _PIR1bits 000C                  _uart_data 007A  
                _uart_cont 0042                 _ADCON0bits 001F                __stringbase 03AF  
               _ADCON1bits 009F                  lcd_port@a 0073                  _str_pot_a 0045  
                _str_pot_b 004B  __size_of_lcd_write_string 0029    __size_of_lcd_write_char 001A  
         __size_of___lwdiv 0046           __size_of___lwmod 003C            _lcd_move_cursor 042D  
                 _adc_flag 0078         __end_of__stringtab 03B0                _isdigit$871 0073  
                 _canal_10 04D7                   _canal_12 04DE                 _ANSELHbits 0189  
         __size_of_lcd_cmd 001A           __size_of_display 009C                 sprintf@val 0031  
         __size_of_isdigit 0012            ___lwdiv@divisor 0073            ___lwdiv@counter 0020  
                 __ptext10 044A                   __ptext11 042D                   __ptext12 0464  
                 __ptext13 04E5                   __ptext14 0493                   __ptext15 04D7  
                 __ptext16 04A8                   __ptext17 04DE                   __ptext18 0407  
                 _lcd_init 02D1                _eusart_flag 0041                   _lcd_port 04E5  
         __size_of_sprintf 0165              __size_of_main 0058                 _INTCONbits 000B  
                 isdigit@c 0074                   intlevel1 0000                  sprintf@ap 002F  
                sprintf@sp 0033           ___lwmod@dividend 0025                  stringcode 03AA  
  __end_of_lcd_move_cursor 044A                   sprintf@c 0035                   sprintf@f 0029  
          ___lwmod@divisor 0023            ___lwmod@counter 0028                   stringdir 03AA  
                 stringtab 03AA           _lcd_write_string 03DE             _lcd_write_char 044A  
